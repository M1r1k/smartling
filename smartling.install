<?php

/**
 * @file
 * Install, update, and uninstall functions for the Smartling module.
 */

/**
 * Implements hook_install().
 */
function smartling_install() {
  variable_set('smartling_log', TRUE);
  variable_set('smartling_retrieval_type', 'published');
  variable_set('smartling_callback_url_use', TRUE);
  variable_set('smartling_api_url', SMARTLING_DEFAULT_API_URL);

  $language_negotiation_language = array(
    'locale-url' => array(
      'callbacks' => array(
        'language' => 'locale_language_from_url',
        'switcher' => 'locale_language_switcher_url',
        'url_rewrite' => 'locale_language_url_rewrite_url',
      ),
      'file' => 'includes/locale.inc',
    ),
    'language-default-url' => array(
      'callbacks' => array(
        'language' => 'language_from_default',
      ),
    ),
  );

  $language_negotiation_language_content = array(
    'locale-url' => array(
      'callbacks' => array(
        'language' => 'locale_language_from_url',
        'switcher' => 'locale_language_switcher_url',
        'url_rewrite' => 'locale_language_url_rewrite_url',
      ),
      'file' => 'includes/locale.inc',
    ),
    'language-default-url' => array(
      'callbacks' => array(
        'language' => 'language_from_default',
      ),
    ),
  );

  $locale_language_providers_weight_language = array(
    'locale-url' => '-8',
    'locale-session' => '-6',
    'locale-user' => '-4',
    'locale-browser' => '-2',
    'language-default' => '10',
  );

  $locale_language_providers_weight_language_content = array(
    'locale-url' => '-8',
    'locale-session' => '-6',
    'locale-user' => '-4',
    'locale-browser' => '-2',
    'locale-interface' => '8',
    'language-default' => '10',
  );

  variable_set('language_negotiation_language', $language_negotiation_language);
  variable_set('language_negotiation_language_content', $language_negotiation_language_content);
  variable_set('locale_language_providers_weight_language', $locale_language_providers_weight_language);
  variable_set('locale_language_providers_weight_language_content', $locale_language_providers_weight_language_content);

  // Install default cron settings for smartling process.
  $cron_base_settings = array();

  $cron_base_settings['smartling_cron'] = array(
    'enabled' => 1,
    'rules' => array(0 => '0 * * * *'),
    'catch_up' => '',
    'service_group' => '',
  );

  $cron_base_settings['ultimate_cron_queue_smartling_check_status'] = array(
    'enabled' => 1,
    'rules' => array(0 => '* * * * *'),
    'catch_up' => '',
    'queue_lease_time' => '',
    'service_group' => '',
    'queue_threads' => '5',
    'queue_threshold' => '1',
  );

  $cron_base_settings['ultimate_cron_queue_smartling_upload'] = array(
    'enabled' => 1,
    'rules' => array(0 => '* * * * *'),
    'catch_up' => '',
    'queue_lease_time' => '',
    'service_group' => '',
    'queue_threads' => '5',
    'queue_threshold' => '1',
  );

  $cron_base_settings['ultimate_cron_queue_smartling_download'] = array(
    'enabled' => 1,
    'rules' => array(0 => '* * * * *'),
    'catch_up' => '',
    'queue_lease_time' => '',
    'service_group' => '',
    'queue_threads' => '5',
    'queue_threshold' => '1',
  );

  foreach ($cron_base_settings as $name => $settings) {
    ultimate_cron_set_settings($name, $settings);
  }

  // i18 string settings.
  $i18n_string_allowed_formats = array();
  // As the user has administer filters permissions we get a full list here.
  foreach (filter_formats() as $fid => $format) {
    $i18n_string_allowed_formats[$fid] = $fid;
  }
  variable_set('i18n_string_allowed_formats', $i18n_string_allowed_formats);
}

/**
 * Implements hook_enable().
 */
function smartling_enable() {

  // Set Multilingual support for content types.
  $node_types = node_type_get_types();
  $taxonomy_vocabularies = taxonomy_get_vocabularies();

  if (is_array($node_types)) {
    $entity_translation_settings = array(
      'default_language' => ENTITY_TRANSLATION_LANGUAGE_DEFAULT,
      'hide_language_selector' => 1,
      'exclude_language_none' => 1,
      'lock_language' => 1,
      'shared_fields_original_only' => 0,
    );

    // Set node and comments settings.
    foreach ($node_types as $type) {
      $mode = variable_get('language_content_type_' . $type->type, NULL);
      if (is_null($mode)) {
        // Must be string '0'.
        variable_set('language_content_type_' . $type->type, '0');
      }
      // Entity translate settings.
      if (smartling_fields_method($type->type)) {
        variable_set('entity_translation_settings_node__' . $type->type, $entity_translation_settings);
        variable_set('entity_translation_settings_comment__comment_node_' . $type->type, $entity_translation_settings);
      }
    }

    // Set taxonomy settings.
    foreach ($taxonomy_vocabularies as $vocabulary) {
      variable_set('entity_translation_settings_taxonomy_term__' . $vocabulary->machine_name, $entity_translation_settings);
    }

    // Set user settings.
    variable_set('entity_translation_settings_user__user', $entity_translation_settings);

    // Entity translation types and other settings.
    $entity_translation_entity_types = array(
      'node' => 'node',
      'taxonomy_term' => 'taxonomy_term',
      'comment' => 'comment',
      'user' => 'user',
    );

    variable_set('entity_translation_entity_types', $entity_translation_entity_types);
    variable_set('entity_translation_shared_labels', 1);
    variable_set('entity_translation_workflow_enabled', 0);
    variable_set('locale_field_language_fallback', 1);
  }
  // Ensure Smartling module is running after native translation modules.
  db_update('system')->fields(array('weight' => 20))
    ->condition('name', 'smartling')->execute();
}

/**
 * Implements hook_uninstall().
 */
function smartling_uninstall() {
  global $conf;
  foreach (array_keys($conf) as $key) {
    // It's important to use === instead of == with strpos()
    if (strpos($key, 'smartling_') === 0) {
      variable_del($key);
    }
  }

  $queue_array[] = 'smartling_check_status';
  $queue_array[] = 'smartling_upload';
  $queue_array[] = 'smartling_download';
  foreach ($queue_array as $queue_name) {
    $queue = DrupalQueue::get($queue_name);
    $queue->deleteQueue();
  }
}

/**
 * Implements hook_schema().
 */
function smartling_schema() {
  $schema['smartling_entity_data'] = array(
    'description' => 'Smartling entity information',
    'fields' => array(
      'eid' => array(
        'description' => 'Entity id',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'rid' => array(
        'description' => 'Related id',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'entity_type' => array(
        'description' => '',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'bundle' => array(
        'description' => '',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'original_language' => array(
        'description' => 'Original language code (drupal format)',
        'type' => 'varchar',
        'length' => 10,
        'not null' => TRUE,
        'default' => '',
      ),
      'target_language' => array(
        'description' => 'Target language code (drupal format)',
        'type' => 'varchar',
        'length' => 10,
        'not null' => TRUE,
        'default' => '',
      ),
      'file_name' => array(
        'description' => 'File with original content.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'translated_file_name' => array(
        'description' => 'File with translated content.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'progress' => array(
        'description' => '',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => NULL,
      ),
      'submitter' => array(
        'description' => '',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'submission_date' => array(
        'description' => 'The Unix timestamp when the entity was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'download' => array(
        'description' => '',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'status' => array(
        'description' => '',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => NULL,
      ),
      'content_hash' => array(
        'description' => '',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'primary key' => array('eid'),
    'indexes' => array(
      'rid' => array('rid'),
      'target_language' => array('target_language'),
    ),
  );

  return $schema;
}

/**
 * Implements hook_requirements().
 */
function smartling_requirements($phase) {
  $requirements = array();

  if ($phase == 'update') {
    $module_list = array();
    $module_names = array('i18n_taxonomy', 'i18n_field', 'entity_translation');
    foreach ($module_names as $module_name) {
      if (!module_exists($module_name)) {
        $module_list[] = $module_name;
      }
    }

    if (!empty($module_list)) {
      $requirements['smartling']['title'] = get_t('Dependencies error');
      $requirements['smartling']['value'] = get_t('Enable modules @modules', array('@modules' => implode(', ', $module_list)));
      $requirements['smartling']['severity'] = REQUIREMENT_WARNING;
      $requirements['smartling']['description'] = get_t('Please enable modules');
      return $requirements;
    }
  }
  // We must always return array, the installer doesn't use module_invoke_all().
  return $requirements;
}

/**
 * Update 7.x-1.0-beta1 => 7.x-2.0-beta1.
 */
function smartling_update_7100(&$sandbox) {
  $sandbox['#finished'] = 0;
  // Multi-part update.
  if (!isset($sandbox['user_from'])) {
    // Move smartling node settings.
    smartling_settings_get_handler()->nodeSetFieldsSettings(variable_get('smartling_translate_fields', array()));
    variable_del('smartling_translate_fields');

    // Add new fields.
    $field_settings = array(
      'description' => '',
      'type' => 'varchar',
      'length' => 255,
      'not null' => TRUE,
      'default' => '',
    );

    db_add_field('smartling_entity_data', 'entity_type', $field_settings);

    // Delete queue of smartling check and download.
    db_delete('queue')->condition('name', 'smartling_check_status')->execute();
    db_delete('queue')->condition('name', 'smartling_download')->execute();

    // Update data in smartling_upload queue.
    $smartling_uploads = db_query("SELECT item_id, data FROM {queue} WHERE name = 'smartling_upload' ORDER BY item_id");
    foreach ($smartling_uploads as $smartling_upload_item) {
      $item = unserialize($smartling_upload_item->data);
      $node = node_load($item->rid);

      $item->entity_type = 'node';
      $item->original_language = $node->language;
      $item->bundle = $item->type;
      unset($item->type);
      $item->d_locales = $item->s_locales;
      unset($item->s_locales);

      foreach ($item->d_locales as $key => $locale) {
        $item->d_locales[$key] = smartling_convert_locale_drupal_to_smartling($locale, TRUE);
      }

      db_query("UPDATE {queue} SET data = :data WHERE item_id = :item_id", array(
        ':data' => serialize($item),
        ':item_id' => $smartling_upload_item->item_id,
      ));
    }

    // Check status.
    $smartling_entities_data = db_query("SELECT eid, status FROM {smartling_entity_data} ORDER BY eid");
    foreach ($smartling_entities_data as $smartling_entity_data) {
      if ($smartling_entity_data->status != '0') {
        db_query("UPDATE {smartling_entity_data} SET status = :status WHERE eid = :eid", array(
          ':status' => '3',
          ':eid' => $smartling_entity_data->eid,
        ));
      }
    }

    // New dependencies.
    $module_names = array('i18n_taxonomy', 'i18n_field', 'entity_translation');
    foreach ($module_names as $module_name) {
      if (!module_exists($module_name)) {
        $module_list[] = $module_name;
      }
    }

    // Disable and uninstall the module.
    if (module_exists('smartling_reports')) {
      module_disable(array('smartling_reports'));
      drupal_uninstall_modules(array('smartling_reports'));
      $module_list[] = 'smartling_reports';
    }

    module_enable($module_list);

    $language_negotiation_language_content = array(
      'locale-url' => array(
        'callbacks' => array(
          'language' => 'locale_language_from_url',
          'switcher' => 'locale_language_switcher_url',
          'url_rewrite' => 'locale_language_url_rewrite_url',
        ),
        'file' => 'includes/locale.inc',
      ),
      'language-default-url' => array(
        'callbacks' => array(
          'language' => 'language_from_default',
        ),
      ),
    );

    $locale_language_providers_weight_language_content = array(
      'locale-url' => '-8',
      'locale-session' => '-6',
      'locale-user' => '-4',
      'locale-browser' => '-2',
      'locale-interface' => '8',
      'language-default' => '10',
    );

    variable_set('language_negotiation_language_content', $language_negotiation_language_content);
    variable_set('locale_language_providers_weight_language_content', $locale_language_providers_weight_language_content);

    // i18 string settings.
    $i18n_string_allowed_formats = array();
    // As the user has administer filters permissions we get a full list here.
    foreach (filter_formats() as $fid => $format) {
      $i18n_string_allowed_formats[$fid] = $fid;
    }
    variable_set('i18n_string_allowed_formats', $i18n_string_allowed_formats);

    // Set Multilingual support for content types.
    $node_types = node_type_get_types();

    if (is_array($node_types)) {
      $entity_translation_settings = array(
        'default_language' => ENTITY_TRANSLATION_LANGUAGE_DEFAULT,
        'hide_language_selector' => 1,
        'exclude_language_none' => 1,
        'lock_language' => 1,
        'shared_fields_original_only' => 0,
      );

      $field_method_types = array();

      foreach ($node_types as $type) {
        // Update mode key for new smartling version.
        $mode = variable_get('language_content_type_' . $type->type, NULL);
        if (!is_null($mode) && ($mode == 'smartling')) {
          $field_method_types[] = $type->type;
          // Set define SMARTLING_FIELDS_METHOD_KEY.
          variable_set('language_content_type_' . $type->type, '4');
        }
        // Entity translate settings.
        if (smartling_fields_method($type->type)) {
          variable_set('entity_translation_settings_node__' . $type->type, $entity_translation_settings);
          variable_set('entity_translation_settings_comment__comment_node_' . $type->type, $entity_translation_settings);
        }
      }
      // Entity translation types and other settings.
      $entity_translation_entity_types = array(
        'node' => 'node',
        'taxonomy_term' => 0,
        'comment' => 'comment',
        'user' => 'user',
      );

      variable_set('entity_translation_entity_types', $entity_translation_entity_types);
      variable_set('entity_translation_shared_labels', 1);
      variable_set('entity_translation_workflow_enabled', 0);
      variable_set('locale_field_language_fallback', 1);
      // Set user settings.
      variable_set('entity_translation_settings_user__user', $entity_translation_settings);
    }

    $queue_array[] = 'smartling_check_status';
    $queue_array[] = 'smartling_upload';
    $queue_array[] = 'smartling_download';
    foreach ($queue_array as $queue_name) {
      $queue = DrupalQueue::get($queue_name);
      $queue->deleteQueue();
    }

    $sandbox['user_from'] = 0;
    $sandbox['user_count'] = db_query("SELECT COUNT(eid) FROM {smartling_entity_data}")->fetchField();
  }
  else {
    // Update this many per page load.
    $count = 1;
    $result = db_query_range("SELECT eid, rid, bundle, original_language, target_language, file_name, translated_file_name, status, submitter, submission_date FROM {smartling_entity_data} ORDER BY eid", $sandbox['user_from'], $count);
    foreach ($result as $res) {
      $status = $res->status;
      $node = node_load($res->rid);
      // Add content hash and convert locale format.
      $content_array = smartling_node_content_to_translate($node);
      $content_hash = md5(serialize($content_array));
      $original_language = $node->language;
      $target_language = smartling_convert_locale_drupal_to_smartling($res->target_language, TRUE);

      // Update file_name and translated_file_name for new version.
      if (!empty($res->file_name)) {
        $file_name = strtolower(trim(preg_replace('#\W+#', '_', $node->title), '_')) . '_node_' . $node->nid . '.xml';
        $file_path_old = smartling_get_dir() . '/' . $res->file_name;
        $file_path_new = smartling_get_dir() . '/' . $file_name;
        if (!rename($file_path_old, $file_path_new)) {
          $status = '3';
        }
      }
      else {
        $file_name = $res->file_name;
      }

      if (!empty($res->translated_file_name)) {
        $translated_file_name = strtolower(trim(preg_replace('#\W+#', '_', $node->title), '_')) . '_node_' . $node->nid . '_' . $target_language . '.xml';
        $file_path_old = smartling_get_dir() . '/' . $res->translated_file_name;
        $file_path_new = smartling_get_dir() . '/' . $translated_file_name;
        if (!rename($file_path_old, $file_path_new)) {
          $status = '3';
        }
      }
      else {
        $translated_file_name = $res->translated_file_name;
      }

      db_query("UPDATE {smartling_entity_data} SET content_hash = :content_hash, entity_type = :entity_type, original_language = :original_language, target_language = :target_language, file_name = :file_name, translated_file_name = :translated_file_name, status = :status WHERE eid = :eid", array(
        ':content_hash' => $content_hash,
        ':entity_type' => 'node',
        ':original_language' => $original_language,
        ':target_language' => $target_language,
        ':file_name' => $file_name,
        ':translated_file_name' => $translated_file_name,
        ':status' => $status,
        ':eid' => $res->eid,
      ));

      // Update entity translation info for fields method.
      if (in_array($res->bundle, $field_method_types)) {
        $entity_load = entity_load_single('node', $res->rid);
        $handler = smartling_entity_translation_get_handler('node', $entity_load);
        $translations = $handler->getTranslations();

        // Initialize translations if they are empty.
        if (empty($translations->original)) {
          $handler->initTranslations();
          smartling_entity_translation_save($handler, $entity_load);
          $translations = $handler->getTranslations();
        }

        $entity_translation = array(
          'entity_type' => 'node',
          'entity_id' => $res->rid,
          'translate' => '0',
          'status' => $entity_load->status,
          'language' => $target_language,
          'uid' => $res->submitter,
          'changed' => $res->submission_date,
        );

        if (isset($translations->data[$target_language])) {
          $handler->setTranslation($entity_translation);
        }
        else {
          // Add the new translation.
          $entity_translation += array(
            'source' => $translations->original,
            'created' => $entity_load->created,
          );
          $handler->setTranslation($entity_translation);
        }
        smartling_entity_translation_save($handler, $entity_load);
      }
    }
    $sandbox['#finished'] = (empty($sandbox['user_count'])) ? 1 : $sandbox['user_from'] / $sandbox['user_count'];
    $sandbox['user_from'] += 1;
    if ($sandbox['user_from'] == $sandbox['user_count']) {
      $sandbox['#finished'] = 1;
      return t('Update smartling entity data and content are complete');
    }
  }
}
