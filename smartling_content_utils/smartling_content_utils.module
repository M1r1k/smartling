<?php

/**
 * @file
 * Code for the nodes preparation for translation feature.
 */

include_once 'nodes_preparation_for_translation.features.inc';

function smartling_content_utils_action_info() {
  return array(
    'smartling_content_utils_translate_prepare_action' => array(
      'type' => 'node',
      'label' => t('Prepare nodes for translation.'),
      'behavior' => array('changes_property'),
      'configurable' => FALSE,
      'vbo_configurable' => TRUE,
      'triggers' => array('any'),
    ),
  );
}

function smartling_content_utils_translate_prepare_action_form() {
  $form = array();

  $form['confirm'] = array(
    '#type' => 'checkbox',
    '#title' => t('I confirm that I understand that this action is irrevertible. And that I habe a backup for my data (DB).'),
  );

  return $form;
}

function smartling_content_utils_translate_prepare_action_validate($form, $form_state) {
  if (!@$form['confirm']['#value']) {
    form_set_error('confirm', t('Please confirm explicitly if you want to continue.'));
  }

  if (!user_access('bypass content access control')) {
    form_set_error('confirm', t('Sorry, but you need "Bypass content access control" permissions to execute this operation. Please ask administrator to grant it to you.'));
  }
}

function smartling_content_utils_translate_prepare_action_submit($form, $form_state) {
  return array();
}

function smartling_content_utils_translate_prepare_action(&$node, $context) {
//  $message = t('Node title is %title. Sincerely, %hero', array(
//    '%title' => $node->title,
//    '%hero' => $context['hero'],
//  ));
//  drupal_set_message($message);
  $default_lang = language_default()->language;

  if ((($node->nid == $node->tnid) || ($node->tnid == 0)) && in_array($node->language, array(LANGUAGE_NONE, $default_lang))) {
    if (smartling_nodes_method($node->type)) {
      smartling_content_utils_translate_router($node, 'node', $default_lang);
    }
  }
  else {
    //todo: Add logging here
  }
}

/*
 * Conversion table
 *
 * -----------------------------------------------------------------------------
 * node lang. | fields lang |    to node method    |   to fields method
 *            |             | node lng | field lng | node lng | field lng
 * -----------------------------------------------------------------------------
 *    UND     |     UND     |   def    |   UND     |   def    |    def
 * -----------------------------------------------------------------------------
 *    def     | def/es/it/fr|   def    |   UND     |          |
 * -----------------------------------------------------------------------------
 *  def/es/it |     UND     |          |           |   def    |    def
 * -----------------------------------------------------------------------------
 *     def    |  <no def>   |        error         |       error
 * -----------------------------------------------------------------------------
 */
function smartling_content_utils_translate_router($entity, $type, $default_lang) {
  $field_langs = field_language($type, $entity);
  //$field_lang = reset ($field_langs);

  if (($entity->language == LANGUAGE_NONE) && in_array(LANGUAGE_NONE, $field_langs)) {
    if (smartling_nodes_method($entity->type)) {
      smartling_content_utils_update_to_node_translate_method($entity, $default_lang);
    }
    else {
      smartling_content_utils_update_to_fields_translate_method($entity, $default_lang);
    }
  }

  if (($entity->language == $default_lang) && (in_array($default_lang, $field_langs)) && (smartling_nodes_method($entity->type))) {
    smartling_content_utils_update_to_node_translate_method($entity, $default_lang);
  }

  if (($entity->language == $default_lang) && (in_array(LANGUAGE_NONE, $field_langs)) && (!smartling_nodes_method($entity->type))) {
    smartling_content_utils_update_to_node_translate_method($entity, $default_lang);
  }

}

function smartling_content_utils_update_to_node_translate_method($node, $default_language) {
  if ($default_language == LANGUAGE_NONE) {
    return FALSE;
  }

  $field_langs = field_language('node', $node);
  if ($node->language == $default_language && in_array(LANGUAGE_NONE, $field_langs)) {
    return TRUE;
  }

  if (!in_array($default_language, $field_langs) && !in_array(LANGUAGE_NONE, $field_langs)) {
    return FALSE;
  }

  foreach($field_langs as $field => $lang) { // go through ALL field of this node
    if ($lang == $default_language) { // if the field is in the wrong language
      $items = field_get_items('node', $node, $field, $lang); // get all field values
      if (!empty($items)) {
        $node->{$field}[LANGUAGE_NONE] = $items; // put it under language neutral
        unset($node->{$field}[$lang]); // remove the old language
      }
    }
  }
  $node->language = $default_language;//LANGUAGE_NONE; // set the node language to neutral
  //node_save($node); // commit changes
}

function smartling_content_utils_update_to_fields_translate_method($node, $default_language) {
  if ($default_language == LANGUAGE_NONE) {
    return FALSE;
  }

  $field_langs = field_language('node', $node);
  if ($node->language == $default_language && in_array($default_language, $field_langs)) {
    return TRUE;
  }

  if (!in_array($default_language, $field_langs) && !in_array(LANGUAGE_NONE, $field_langs)) {
    return FALSE;
  }

  //$type = $node->type; // get the content type
  foreach($field_langs as $field => $lang) { // go through ALL field of this node
    if ($lang == LANGUAGE_NONE) { // if the field is in the wrong language
      $items = field_get_items('node', $node, $field, $lang); // get all field values
      if (!empty($items)) {
        $node->{$field}[$default_language] = $items; // put it under language neutral
        unset($node->{$field}[$lang]); // remove the old language
      }
    }
  }
  $node->language = $default_language;//LANGUAGE_NONE; // set the node language to neutral
  //node_save($node); // commit changes
}