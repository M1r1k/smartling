<?php

/**
 * @file
 * Tests for smartling.
 */

/**
 * SmartlingCopyFieldsTest.
 */
class SmartlingUtilsTest extends DrupalWebTestCase {

  /**
   * Test info.
   *
   * @return array
   *   Return test info.
   */
  public static function getInfo() {
    return array(
      'name' => 'Content - node transformation for translation',
      'description' => 'Test the node preparation for translation according to Smartling settings module.',
      'group' => 'Smartling',
    );
  }


  protected function customCreateNode($settings = array(), $node_lang = LANGUAGE_NONE, $field_lang = LANGUAGE_NONE) {
    // Populate defaults array.
    $settings += array(
      'body'      => array($field_lang => array(array())),
      'title'     => $this->randomName(8),
      'comment'   => 2,
      'changed'   => REQUEST_TIME,
      'moderate'  => 0,
      'promote'   => 0,
      'revision'  => 1,
      'log'       => '',
      'status'    => 1,
      'sticky'    => 0,
      'type'      => 'page',
      'revisions' => NULL,
      'language'  => $node_lang,
    );

    // Use the original node's created time for existing nodes.
    if (isset($settings['created']) && !isset($settings['date'])) {
      $settings['date'] = format_date($settings['created'], 'custom', 'Y-m-d H:i:s O');
    }

    // If the node's user uid is not specified manually, use the currently
    // logged in user if available, or else the user running the test.
    if (!isset($settings['uid'])) {
      if ($this->loggedInUser) {
        $settings['uid'] = $this->loggedInUser->uid;
      }
      else {
        global $user;
        $settings['uid'] = $user->uid;
      }
    }

    // Merge body field value and format separately.
    $body = array(
      'value' => $this->randomName(32),
      'format' => filter_default_format(),
    );
    $settings['body'][$field_lang][0] += $body;

    $node = (object) $settings;
    node_save($node);

    // Small hack to link revisions to our test user.
    db_update('node_revision')
      ->fields(array('uid' => $node->uid))
      ->condition('vid', $node->vid)
      ->execute();
    return $node;
  }

  /**
   * Test correct copy fields when translated node not exist.
   */
  public function testPrepareForByNodesTranslationUndUnd() {
    $node = $this->drupalCreateNode();

    $node_res = clone $node;

    smartling_content_utils_update_to_node_translate_method($node, 'en');

    $this->assertEqual($node_res->body, $node->body);
    $this->assertEqual($node->language, 'en');
  }

  public function testPrepareForByNodesTranslationUndEn() {
    $settings = array('language' => 'en');
    $node = $this->customCreateNode($settings, LANGUAGE_NONE, 'en');

    $node_res = clone $node;
    $node_res->language = 'en';
    $node_res->body[LANGUAGE_NONE] = $node_res->body['en'];
    unset($node_res->body['en']);

    smartling_content_utils_update_to_node_translate_method($node, 'en');

    $this->assertEqual($node_res->body, $node->body);
    $this->assertEqual($node->language, 'en');
  }

  public function testPrepareForByNodesTranslationEnUnd() {
    $settings = array('language' => 'en');
    $node = $this->customCreateNode($settings, 'en', LANGUAGE_NONE);

    $node_res = clone $node;

    smartling_content_utils_update_to_node_translate_method($node, 'en');

    $this->assertEqual($node_res->body, $node->body);
    $this->assertEqual($node->language, 'en');
  }

  public function testPrepareForByNodesTranslationEnEn() {
    $settings = array('language' => 'en');
    $node = $this->customCreateNode($settings, 'en', 'en');

    $node_res = clone $node;
    $node_res->body[LANGUAGE_NONE] = $node_res->body['en'];
    unset($node_res->body['en']);

    smartling_content_utils_update_to_node_translate_method($node, 'en');

    $this->assertEqual($node_res->body, $node->body);
    $this->assertEqual($node->language, 'en');
  }




  /**
   * Test correct copy fields when translated node not exist.
   */
  public function testPrepareForByFieldsTranslationUndUnd() {
    $settings = array('language' => LANGUAGE_NONE);
    $node = $this->customCreateNode($settings, LANGUAGE_NONE, LANGUAGE_NONE);

    $node_res = clone $node;
    $node_res->language = 'en';
    $node_res->body['en'] = $node_res->body[LANGUAGE_NONE];
    unset($node_res->body[LANGUAGE_NONE]);

    smartling_content_utils_update_to_fields_translate_method($node, 'en');

    $this->assertEqual($node_res->body, $node->body);
    $this->assertEqual($node->language, 'en');
  }

  /**
   * Test correct copy fields when translated node not exist.
   */
  public function testPrepareForByFieldsTranslationUndEn() {
    $settings = array('language' => LANGUAGE_NONE);
    $node = $this->customCreateNode($settings, LANGUAGE_NONE, 'en');

    $node_res = clone $node;
    $node_res->language = 'en';

    smartling_content_utils_update_to_fields_translate_method($node, 'en');

    $this->assertEqual($node_res->body, $node->body);
    $this->assertEqual($node->language, 'en');
  }

  /**
   * Test correct copy fields when translated node not exist.
   */
  public function testPrepareForByFieldsTranslationEnUnd() {
    $settings = array('language' => LANGUAGE_NONE);
    $node = $this->customCreateNode($settings, 'en', LANGUAGE_NONE);

    $node_res = clone $node;
    $node_res->body['en'] = $node_res->body[LANGUAGE_NONE];
    unset($node_res->body[LANGUAGE_NONE]);

    smartling_content_utils_update_to_fields_translate_method($node, 'en');

    $this->assertEqual($node_res->body, $node->body);
    $this->assertEqual($node->language, 'en');
  }

  /**
   * Test correct copy fields when translated node not exist.
   */
  public function testPrepareForByFieldsTranslationEnEn() {
    $settings = array('language' => LANGUAGE_NONE);
    $node = $this->customCreateNode($settings, 'en', 'en');

    $node_res = clone $node;

    smartling_content_utils_update_to_fields_translate_method($node, 'en');

    $this->assertEqual($node_res->body, $node->body);
    $this->assertEqual($node->language, 'en');
  }
}
