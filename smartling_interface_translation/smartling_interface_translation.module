<?php

/**
 * @file
 * Code for the Smartling interface translation feature.
 */

include_once 'smartling_interface_translation.features.inc';
include_once 'includes/smartling_interface_translation.entity.inc';

/**
 * Implements hook_action_info().
 */
function smartling_interface_translation_action_info() {
  return array(
    'smartling_interface_translation_do_translate_action' => array(
      'type' => 'system',
      'label' => t('Smartling interface translate.'),
      'configurable' => TRUE,
      'triggers' => array('any'),
    ),
  );
}

/**
 * Implements hook_views_data_alter().
 */
function smartling_interface_translation_views_data_alter(&$data) {
  // Add views handler.
  if (isset($data['smartling_interface_entity'])) {
    $data['smartling_interface_entity']['locale_info'] = array(
      'group' => t('Smartling'),
      'title' => t('Locales for interface entity'),
      'help' => t('Smartling locales property.'),
    );
    $data['smartling_interface_entity']['locale_info']['field'] = array(
      'real field' => 'gid',
      'handler' => 'SmartlingHandlerFieldLocaleInfo',
      'click sortable' => TRUE,
    );

    // Smartling interface entity relationship.
    $data['smartling_interface_entity']['smartling_entity_data'] = array(
      'group' => t('Smartling'),
      'title' => t('Smartling Entity'),
      'help' => t('Smartling interface entity relationship.'),
      'relationship' => array(
        'base' => 'smartling_entity_data',
        'base field' => 'rid',
        'relationship field' => 'gid',
        'handler' => 'views_handler_relationship',
        'label' => t('Smartling related ID'),
      ),
    );
  }
}

/**
 * Smartling do interface translate action.
 *
 * @param object $entity
 *   Action entity object.
 * @param array $context
 *   Context info.
 *
 * @global object $user
 *   Drupal user object.
 */
function smartling_interface_translation_do_translate_action($entity, array $context) {

  try {
    drupal_container()->get('smartling.queue_managers.upload_router')->routeUploadRequest($context['entity_type'], $entity, $context['translate_to_langs']);
  }
  catch (\Drupal\smartling\SmartlingExceptions\SmartlingGenericException $e) {
    smartling_log_get_handler()->error($e->getMessage() . '   ' . print_r($e, TRUE));
  }
}

/**
 * Smartling do translate interface action form.
 *
 * @param array $context
 *   Context info array.
 * @param array $form_state
 *   FAPI array.
 *
 * @return array
 *   Return FAPI array for smartling do translate action form.
 */
function smartling_interface_translation_do_translate_action_form(array $context, array &$form_state) {
  // Get all languages, except English
  $languages = smartling_language_options_list();
  if (isset($languages['en'])) {
    unset($languages['en']);
  }
  $form['do_translate_action']['languages'] = array(
    '#type' => 'checkboxes',
    '#options' => $languages,
    '#title' => t('Check language'),
  );
  return $form;
}

/**
 * Smartling do translate interface action form - Form Validate.
 *
 * @param array $form
 *   FAPI array.
 * @param array $form_state
 *   FAPI array.
 */
function smartling_interface_translation_do_translate_action_validate(array $form, array &$form_state) {
  if (!smartling_is_configured()) {
    form_set_error('submit', t('Smartling not configured!'));
  }

  $select_languages = array();
  if (!empty($form_state['input']['languages'])) {
    foreach ($form_state['input']['languages'] as $d_locale) {

      if (!is_null($d_locale) && !empty($d_locale)) {
        $select_languages[] = $d_locale;
      }
    }
  }

  if (!empty($select_languages) && (count($select_languages) > 0)) {
    $form_state['translate_to_langs'] = $select_languages;
  }
  else {
    form_set_error('languages', t('Check language, please.'));
  }
}

/**
 * Smartling do translate interface action form - Form Submit.
 *
 * @param array $form
 *   FAPI array.
 * @param array $form_state
 *   FAPI array.
 *
 * @return array
 *   Return array with languages to translate.
 */
function smartling_interface_translation_do_translate_action_submit(array $form, array $form_state) {
  $count_op = count($form_state['selection']);
  $log = smartling_log_get_handler();
  $log->info(format_plural($count_op, 'Smartling Bulk Submit - upload 1 interface', 'Smartling Bulk Submit - upload @count interfaces'));
  return array('translate_to_langs' => $form_state['translate_to_langs']);
}

/**
  $log = smartling_log_get_handler();
  try {
  }
  catch (\Drupal\smartling\SmartlingExceptions\SmartlingGenericException $e) {
    $log->critical($e->getMessage() . '   ' . print_r($e, TRUE));
    drupal_set_message($e->getMessage(), 'error');
  }
 * Implements hook_modules_enabled().
 */
function smartling_interface_translation_modules_enabled($modules) {
  $groups = module_invoke_all('locale', 'groups');
  $query = db_select('smartling_interface_entity', 'sie');
  $isset_groups = $query->fields('sie', array('textgroup'))
    ->execute()
    ->fetchCol();

  // Add only new groups.
  foreach ($groups as $group => $group_name) {
    if (!in_array($group, $isset_groups)) {
      $smartling_interface_entity = smartling_interface_entity_create();
      $smartling_interface_entity->textgroup = $group;
      $smartling_interface_entity->textgroup_name = $group_name;
      smartling_interface_entity_save($smartling_interface_entity);
    }
  }
}

/**
 * Implements hook_modules_disabled().
 */
function smartling_interface_translation_modules_disabled($modules) {
  $groups = module_invoke_all('locale', 'groups');
  $groups = array_keys($groups);
  // Delete smartling_interface_entity.
  db_delete('smartling_interface_entity')->condition('textgroup', $groups, 'NOT IN')->execute();
  // Delete smartling_entity_data.
  db_delete('smartling_entity_data')
    ->condition('entity_type', 'smartling_interface_entity')
    ->condition('bundle', $groups, 'NOT IN')
    ->execute();
}
