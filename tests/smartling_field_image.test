<?php

/**
 * @file
 * Tests for smartling.
 */

/**
 * SmartlingTranslatableFieldsTest.
 */
class SmartlingTranslatableFieldsTest extends SmartlingWebTestCase {

  /**
   * Test info.
   *
   * @return array
   *   Return test info.
   */
  public static function getInfo() {
    return array(
      'name' => 'Content - Save translation for Image field',
      'description' => 'Test saving translation for Image field (Alt, Title)',
      'group' => 'Smartling',
    );
  }

  /**
   * Test correct image filed not translatable field.
   */
  public function testCorrectImageFiledNotTranslatableField() {
    // Set correct account settings.
    $this->smartlingSetCorrectSettings();
    // Set field settings.
    $this->smartlingEnableTitleAltForImageField('article', 'field_image');
    // Set nodes method for CT.
    $this->smartlingSetMethodSettings('article');
    // Set fields for article CT.
    $this->smartlingSetFieldSettings('article', 'field_image');
    // Create pseudo node.
    $settings = array(
      'title' => 'Node test title',
      'comment' => 0,
      'changed' => REQUEST_TIME,
      'moderate' => 0,
      'promote' => 0,
      'revision' => 1,
      'log' => '',
      'status' => 1,
      'sticky' => 0,
      'revisions' => NULL,
      'language' => 'ru',
    );
    $settings['body'][$settings['language']][0]['value'] = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Etiam vitae arcu at leo cursus laoreet. Curabitur dui tortor, adipiscing malesuada tempor in, bibendum ac diam.';
    $this->smartlingCreateNode('article', $settings);
    // Set node values.
    $this->smartlingAddImageToField(1, 'field_image');

    $xml_string = <<<EOT
<?xml version = "1.0" encoding = "UTF-8"?>
<!-- smartling.translate_paths = data/localize/string -->
<!-- smartling.string_format_paths = html : data/localize/string -->
<data><localize title="1"><string id="field_image-alt-img-0" quantity="1" fid="1">Translated alternate text of image</string><string id="field_image-title-img-0" quantity="1" fid="1">Translated title of image</string></localize></data>
EOT;
    $xml = new DOMDocument();
    $xml->loadXML($xml_string);

    $node_translate_fields = smartling_settings_get_handler()->nodeGetFieldsSettings();
    $fields = $node_translate_fields['article'];

    $result = smartling_copy_translations_from_xml_to_fields('node', $xml, 1, 'ru', 'en', $fields);

    if ($result) {
      // Asserts.
      $this->drupalGet('node/1/edit');
      $node_translated = node_load(1);

      $field_name = 'field_image';
      $this->assertTrue((!empty($node_translated->{$field_name}[LANGUAGE_NONE][0]['title']) && ($node_translated->{$field_name}[LANGUAGE_NONE][0]['title'] != 'Title of image')), t('Field image contains translated content for sub-field title and language UND for @field_name field', array('@field_name' => $field_name)), t('Browser'));
      $this->assertTrue((!empty($node_translated->{$field_name}[LANGUAGE_NONE][0]['alt']) && ($node_translated->{$field_name}[LANGUAGE_NONE][0]['alt'] != 'Alternate text of image')), t('Field image contains translated content for sub-field alt and language UND for @field_name field', array('@field_name' => $field_name)), t('Browser'));
    }
    else {
      $message = t('Test failed');
      $this->error($message);
    }
  }

  /**
   * Test correct image filed translatable field.
   */
  public function testCorrectImageFiledTranslatableField() {
    // Set correct account settings.
    $this->smartlingSetCorrectSettings();
    // Set field settings.
    $this->smartlingEnableTitleAltForImageField('article', 'field_image');
    // Set nodes method for CT.
    $this->smartlingSetMethodSettings('article', 1);
    // Set fields for article CT.
    $this->smartlingSetFieldSettings('article', 'field_image');
    // Create pseudo node.
    $settings = array(
      'title' => 'Node test title',
      'comment' => 0,
      'changed' => REQUEST_TIME,
      'moderate' => 0,
      'promote' => 0,
      'revision' => 1,
      'log' => '',
      'status' => 1,
      'sticky' => 0,
      'revisions' => NULL,
      'language' => 'ru',
    );
    $settings['body'][$settings['language']][0]['value'] = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Etiam vitae arcu at leo cursus laoreet. Curabitur dui tortor, adipiscing malesuada tempor in, bibendum ac diam.';
    $this->smartlingCreateNode('article', $settings);
    // Set node values.
    $this->smartlingAddImageToField(1, 'field_image', 'ru');

    $xml_string = <<<EOT
<?xml version = "1.0" encoding = "UTF-8"?>
<!-- smartling.translate_paths = data/localize/string -->
<!-- smartling.string_format_paths = html : data/localize/string -->
<data><localize title="1"><string id="field_image-alt-img-0" quantity="1" fid="1">Translated alternate text of image</string><string id="field_image-title-img-0" quantity="1" fid="1">Translated title of image</string></localize></data>
EOT;
    $xml = new DOMDocument();
    $xml->loadXML($xml_string);

    $node_translate_fields = smartling_settings_get_handler()->nodeGetFieldsSettings();
    $fields = $node_translate_fields['article'];

    $result = smartling_copy_translations_from_xml_to_fields('node', $xml, 1, 'ru', 'en', $fields);

    if ($result) {
      // Asserts.
      $this->drupalGet('node/1/edit');
      $this->drupalGet('node/1');
      $node_translated = node_load(1);

      $field_name = 'field_image';
      $this->assertTrue((!empty($node_translated->{$field_name}['ru'][0]['title']) && ($node_translated->{$field_name}['ru'][0]['title'] != 'Title of image')), t('Field image contains translated content for sub-field title and language RU for @field_name field', array('@field_name' => $field_name)), t('Browser'));
      $this->assertTrue((!empty($node_translated->{$field_name}['ru'][0]['alt']) && ($node_translated->{$field_name}['ru'][0]['alt'] != 'Alternate text of image')), t('Field image contains translated content for sub-field alt and language RU for @field_name field', array('@field_name' => $field_name)), t('Browser'));
    }
    else {
      $message = t('Test failed');
      $this->error($message);
    }
  }

}
