<?php

/**
 * @file
 * Tests for smartling.
 */

/**
 * SmartlingNodeUploadTest.
 */
class SmartlingNodeUploadTest extends SmartlingWebTestCase {

  /**
   * Test info.
   *
   * @return array
   *   Return test info.
   */
  public static function getInfo() {
    return array(
      'name' => 'Content - Upload content. Upload single node from Edit form',
      'description' => 'Test success flow of upload from Edit form',
      'group' => 'Smartling',
    );
  }

  /**
   * Test correct node upload.
   */
  public function testCorrectNodeUpload() {
    // Add predefined languages.
    $this->smartlingAddSiteLanguage('zh-hans');
    // Set correct account settings.
    $this->smartlingSetCorrectSettings();
    // Set nodes method for page CT.
    $this->smartlingSetMethodSettings('page');
    // Set title field for article CT.
    $this->smartlingSetFieldSettings('page', 'title_property_field');
    // Create node.
    $node_array = array(
      'title' => 'Title test',
      'language' => 'en',
    );
    $this->drupalPost('node/add/page', $node_array, t('Save'));

    // Send node to smartling.
    $edit = array(
      "target[ru]" => 'ru',
    );
    $this->drupalPost('node/1/edit', $edit, t('Send to Smartling'));
    $this->assertText(t('The node "@title" has been sent to Smartling for translation to "@langs".', array(
      '@title' => 'Title test',
      '@langs' => 'ru',
    )));

    $queue = db_select('queue', 'q')
      ->fields('q', array('data'))
      ->condition('q.name', 'smartling_upload', '=')
      ->execute()
      ->fetchObject();
    if (empty($queue)) {
      $this->error('Queue smartling_upload is empty.');
    }
    else {
      $data = unserialize($queue->data);
//      $this->verbose(print_r($data, TRUE));
      $this->assertEqual($data, 1);
    }
  }

}
