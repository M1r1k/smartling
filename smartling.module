<?php

/**
 * @file
 * Contains smartling.module
 */
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\smartling\Queue\SmartlingQueueFactory;

// @todo move them to classes.
define('SMARTLING_STATUS_IN_QUEUE', 0);
define('SMARTLING_STATUS_IN_TRANSLATE', 1);
define('SMARTLING_STATUS_TRANSLATED', 2);
define('SMARTLING_STATUS_CHANGE', 3);
define('SMARTLING_STATUS_FAILED', 4);
define('SMARTLING_CRON_RUN_INTERVAL', 3 * 60 * 60);

///**
// * Implements hook_form_FORM_ID_alter()
// *
// * @see \Drupal\language\FormContentLanguageSettingsForm
// */
//function smartling_form_language_content_settings_form_alter(array &$form, \Drupal\Core\Form\FormStateInterface $form_state) {
//  foreach (Element::children($form['settings']) as $entity_type_id) {
//    foreach(Element::children($form['settings'][$entity_type_id]) as $bundle_id) {
//      $element = &$form['settings'][$entity_type_id][$bundle_id];
//
//      $element['settings']['smartling_translatable'] = [
//        '#type' => 'checkbox',
//        '#title' => t('Should be translated via Smartling'),
//        '#default_value' => Drupal::config('smartling.settings')->get("entities_settings.$entity_type_id.$bundle_id")
//      ];
//    }
//  }
//  $form['#submit'][] = 'smartling_language_configuration_element_submit';
//}
//
//function smartling_language_configuration_element_submit(array &$form, FormStateInterface $form_state) {
//  $config = Drupal::service('config.factory')->getEditable('smartling.settings');
//  foreach ($form_state->getValues()['settings'] as $entity_type_id => $entity_settings) {
//    foreach ($entity_settings as $bundle_id => $bundle_settings) {
//      if (!empty($bundle_settings['settings']['smartling_translatable'])) {
//        $config->set("entities_settings.$entity_type_id.$bundle_id", 1);
//      }
//    }
//  }
//  $config->save();
//}

/**
 * Implements hook_cron().
 */
function smartling_cron() {
  $cron_last = \Drupal::state()->get('system.cron_last');
  if ( $cron_last + SMARTLING_CRON_RUN_INTERVAL > time()) {
    return;
  }

  $ids = \Drupal::entityQuery('smartling_entity_data')
    ->condition('status', SMARTLING_STATUS_IN_TRANSLATE)
    ->execute();
  $manager = \Drupal::service('smartling.manager');
  if (!empty($ids)) {
    /* @var SmartlingQueueFactory $queue */
    $manager->addCheckStatusQueueWorker($ids);
  }
}

