<?php

/**
 * @file
 * The Smartling module file.
 */

use Drupal\smartling\Alters\SmartlingContentParserInterface;
use Drupal\smartling\Alters\SmartlingContentProcessorInterface;
use Drupal\smartling\Alters\SmartlingContentBaseParser;
use Drupal\smartling\Alters\SmartlingContentImageUrlParser;
use Drupal\smartling\Alters\SmartlingContentImageUrlProcessor;
use Drupal\smartling\Alters\SmartlingContentMediaEncodedParser;
use Drupal\smartling\Alters\SmartlingContentMediaEncodedProcessor;
use Drupal\smartling\Alters\SmartlingContentMediaParser;
use Drupal\smartling\Alters\SmartlingContentMediaProcessor;

define('SMARTLING_FIELDS_METHOD_KEY', '4');
define('SMARTLING_NODES_METHOD_KEY', '2');

define('SMARTLING_TRANSLATE_NODE', 'smartling_translate_node');
define('SMARTLING_ORIGINAL_NODE', 'smartling_original_node');
define('SMARTLING_ORIGINAL_WITHOUT_TRANSLATION_NODE', 'smartling_original_without_translation_node');

define('SMARTLING_STATUS_IN_QUEUE', 0);
define('SMARTLING_STATUS_IN_TRANSLATE', 1);
define('SMARTLING_STATUS_TRANSLATED', 2);
define('SMARTLING_STATUS_CHANGE', 3);
define('SMARTLING_STATUS_FAILED', 4);
define('SMARTLING_STATUS_EVENT_SEND_TO_UPLOAD_QUEUE', 'smartling_send_node_to_upload_queue');
define('SMARTLING_STATUS_EVENT_FAILED_UPLOAD', 'smartling_send_node_failed_upload');
define('SMARTLING_STATUS_EVENT_UPLOAD_TO_SERVICE', 'smartling_upload_node_to_service');
define('SMARTLING_STATUS_EVENT_DOWNLOAD_FROM_SERVICE', 'smartling_download_node_from_service');
define('SMARTLING_STATUS_EVENT_UPDATE_FIELDS', 'smartling_update_node_fields');
define('SMARTLING_STATUS_EVENT_NODE_ENTITY_UPDATE', 'check_status_in_node_entity_update');

define('SMARTLING_PRODUCTION_MODE', 'PRODUCTION');
define('SMARTLING_DEFAULT_API_URL', 'https://capi.smartling.com/v1');

include_once 'smartling.utils.inc';
include_once 'smartling.processing.inc';
include_once 'includes/smartling.workers.inc';
include_once 'includes/smartling.entity.inc';
include_once 'views/smartling.views.inc';
include_once 'entities/smartling.taxonomy.inc';
include_once 'entities/smartling.node.inc';
include_once 'entities/smartling.comments.inc';
include_once 'entities/smartling.user.inc';
include_once 'smartling.demo_content.php';

/**
 * Implements hook_boot().
 */
function smartling_boot() {
  smartling_register();
}

/**
 * Implements hook_init().
 */
function smartling_init() {
  smartling_register();
}

/**
 * Implements hook_flush_caches().
 */
function smartling_flush_caches() {
  // In some context such as module activation, the boot method is not called so
  // the component is never registered with the class loader. This cause
  // troubles as we need the class definition when bootstrapping.
  smartling_register();
  return array();
}

/**
 * Registers smartling and dependencies name-space with the class loader.
 */
function smartling_register() {
  // Activates the class loader.
  $loader = drupal_classloader();
  $loader->registerNamespace('Drupal\smartling\Alters', __DIR__ . '/lib');
  $loader->registerNamespace('Drupal\smartling\Log', __DIR__ . '/lib');
  $loader->registerNamespace('Drupal\smartling\Settings', __DIR__ . '/lib');
  $loader->registerNamespace('Drupal\smartling\Processors', __DIR__ . '/lib');
  $loader->registerNamespace('Drupal\smartling\FieldProcessors', __DIR__ . '/lib');

}

/**
 * Implements hook_menu().
 */
function smartling_menu() {
  $items = array();

  $items['admin/config/regional/smartling'] = array(
    'title' => 'Smartling settings',
    'weight' => -99,
    'type' => MENU_NORMAL_ITEM,
    'file' => 'smartling.admin.inc',
    'page callback' => 'smartling_admin_configuration_view',
    'access arguments' => array('administer smartling'),
  );

  $items['smartling/download/%/%'] = array(
    'title' => 'Smartling settings',
    'type' => MENU_CALLBACK,
    'page arguments' => array(2, 3),
    'page callback' => 'smartling_download_translate_form_submission_form',
    'access arguments' => array('administer smartling'),
  );

  $items['smartling'] = array(
    'title' => 'Smartling settings',
    'type' => MENU_CALLBACK,
    'page callback' => 'smartling_download_translate_simple_callback',
    'page arguments' => array(2, 3),
    'access arguments' => array('administer smartling'),
  );

  $items['smartling/callback/%'] = array(
    'title' => 'Smartling push',
    'type' => MENU_CALLBACK,
    'page callback' => 'smartling_push_callback',
    'access callback' => 'smartling_push_callback_access',
    'access arguments' => array(2),
  );

  $items['admin/config/regional/smartling/manual-management'] = array(
    'title' => 'Smartling manual translation management',
    'description' => 'Here you can send node to smartling or get translation from smartling for specific node if available',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('smartling_manual_management_form'),
    'access arguments' => array('administer smartling'),
    'file' => 'smartling.pages.inc',
  );

  return $items;
}

/**
 * Simple menu callback.
 *
 * Menu callback to register smartling paths in
 * menu router, to avoid problems with fast_404 module.
 *
 * @return string
 *   Return empty string.
 */
function smartling_download_translate_simple_callback() {
  return '';
}

/**
 * Smartling download translate form submission form.
 *
 * @param int $rid
 *   Related id.
 * @param string $d_locale
 *   Locale in drupal format (ru, en).
 * @param object $entity_data
 *   Smartling transaction entity.
 */
function smartling_download_translate_form_submission_form($rid, $d_locale = '', $entity_data = NULL) {
  smartling_download_translate($rid, $d_locale, $entity_data);
  // TODO : Make a wrapper for unset + drupal_goto
  unset($_GET['destination']);
  drupal_goto('admin/content/smartling/report-in-progress');
}

/**
 * Implements hook_permission().
 */
function smartling_permission() {
  $permissions = array(
    'administer smartling' => array(
      'title' => t('Administer Smartling'),
      'description' => t('Access the administrative settings for the module.'),
    ),
    'administer smartling_entity_data entities' => array(
      'title' => t('Administer Smartling Entity Data entities'),
    ),
    'view any smartling_entity_data entity' => array(
      'title' => t('View any Smartling Entity Data entity'),
    ),
    'edit any smartling_entity_data entity' => array(
      'title' => t('Edit any Smartling Entity Data entity'),
    ),
    'create smartling_entity_data entities' => array(
      'title' => t('Create Smartling Entity Data Entities'),
    ),
  );
  return $permissions;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
//function smartling_form_entity_translation_admin_form_alter(&$form, &$form_state) {
//
//  $form['enabled']['entity_translation_entity_types']['node']['#disabled'] = TRUE;
//  $form['enabled']['entity_translation_entity_types']['taxonomy_term']['#disabled'] = TRUE;
//  $form['enabled']['entity_translation_entity_types']['comment']['#disabled'] = TRUE;
//  $form['enabled']['entity_translation_entity_types']['user']['#disabled'] = TRUE;
//
//  $form['smartling'] = array(
//    '#type' => 'item',
//    '#title' => t('Some settings should be disabled when using Smartling.'),
//    '#weight' => -100,
//  );
//}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @see smartling_field_settings_update_submit()
 */
function smartling_form_entity_translation_translatable_form_alter(&$form, &$form_state) {
  $form['#submit'][] = 'smartling_field_settings_update_submit';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function smartling_form_title_field_replacement_form_alter(&$form, &$form_state) {
  $form['#submit'][] = 'smartling_title_field_replacement_submit';
  $form['#submit'] = array_reverse($form['#submit']);
}

/**
 * Title field replacement form - Form Submit.
 *
 * @param array $form
 *   FAPI array.
 * @param array $form_state
 *   FAPI array.
 */
function smartling_title_field_replacement_submit(array $form, array &$form_state) {
  $smartling_settings = smartling_settings_get_handler();
  switch ($form['#entity_type']) {
    case 'node':
      if (smartling_nodes_method($form['#bundle']) && ($form['#field_name'] == 'title')) {
        $node_settings = $smartling_settings->nodeGetFieldsSettingsByBundle($form['#bundle']);
        $property_field = $form['#field_name'] . '_property_field';
        if (isset($node_settings[$property_field])) {
          $smartling_settings->deleteSingleFieldFromSettings($form['#entity_type'], $form['#bundle'], $form['#field_name'] . '_property_field');
          $smartling_settings->addSingleFieldToSettings($form['#entity_type'], $form['#bundle'], $form['#field_name'] . '_field');
        }
      }
      break;

    case 'taxonomy_term':
      $vocabulary = taxonomy_vocabulary_machine_name_load($form['#bundle']);
      $vocabulary_mode = i18n_taxonomy_vocabulary_mode($vocabulary);
      if (($vocabulary_mode == I18N_MODE_TRANSLATE) && (($form['#field_name'] == 'name') || (($form['#field_name'] == 'description')))) {
        $term_settings = $smartling_settings->taxonomyTermGetFieldsSettingsByBundle($form['#bundle']);
        $property_field = $form['#field_name'] . '_property_field';
        if (isset($term_settings[$property_field])) {
          $smartling_settings->deleteSingleFieldFromSettings($form['#entity_type'], $form['#bundle'], $form['#field_name'] . '_property_field');
          $smartling_settings->addSingleFieldToSettings($form['#entity_type'], $form['#bundle'], $form['#field_name'] . '_field');
        }
      }
      break;

    default:
      break;
  }
}

/**
 * Smartling field settings update form - Form Submit.
 *
 * If a translation for the field was turned off, remove
 * the field from the configuration node smartling.
 *
 * @param array $form
 *   FAPI array.
 * @param array $form_state
 *   FAPI array.
 */
function smartling_field_settings_update_submit(array $form, array &$form_state) {

  if (($form_state['values']['translatable'] == 1) && ($form_state['values']['confirm'] == 1) && !empty($form_state['field']['bundles'])) {
    $smartling_settings = smartling_settings_get_handler();
    foreach ($form_state['field']['bundles'] as $entity_type => $bundles) {
      foreach ($bundles as $bundle) {
        $smartling_settings->deleteSingleFieldFromSettings($entity_type, $bundle, $form_state['field']['field_name']);
      }
    }
  }
}

/**
 * Smartling download and translate form - Form Submit.
 *
 * @param array $form
 *   FAPI array.
 * @param array $form_state
 *   FAPI array.
 */
function smartling_download_translate_form_submit(array $form, array &$form_state) {
  $log = smartling_log_get_handler();

  if (count(array_filter($form_state['values']['target'])) !== 0) {
    foreach ($form_state['values']['target'] as $d_locale) {
      if ($d_locale === 0) {
        continue;
      }

      $entity_wrapper = entity_metadata_wrapper($form['#entity_type'], $form['#entity']);


      $log->setMessage('Smartling start force download translated file for node id - @nid, locale - @locale')
        ->setVariables(array(
          '@nid' => $entity_wrapper->getIdentifier(),
          '@locale' => $d_locale,
        ))
        // @todo remove hardcoded link. We have function linkToContent()
        ->setLink(l(t('Edit node'), 'node/' . $entity_wrapper->getIdentifier() . '/edit'))
        ->execute();

      $entity_data = smartling_entity_load_by_conditions(array(
        'rid' => $entity_wrapper->getIdentifier(),
        'bundle' => $entity_wrapper->getBundle(),
        'target_language' => $d_locale,
      ));

      if (!$entity_data) {
        $log->setMessage('Smartling FAIL force download translated file for node id - @nid, locale - @locale')
          ->setVariables(array(
            '@nid' => $entity_wrapper->getIdentifier(),
            '@locale' => $d_locale,
          ))
          // @todo remove hardcoded link. We have function linkToContent()
          ->setLink(l(t('Edit node'), 'node/' . $entity_wrapper->getIdentifier() . '/edit'))
          ->execute();
        drupal_set_message(t('You did not send this entity to translate or that the task is in queue. Language - @language', array('@language' => $d_locale)));
        return;
      }

      $processor = smartling_get_entity_processor($entity_data);
      // @todo implement chain interface.
      $processor->downloadTranslation();
      //$processor->updateDrupalTranslation();
      $processor->updateEntityFromXML();
    }

//    switch ($form['#entity_type']) {
//      case 'node':
//        $node = node_form_submit_build_node($form, $form_state);
//        node_save($node);
//
//        $nid = $form_state['values']['nid'];
//        $log->setMessage('Smartling start force download translated file for node id - @nid, locale - @locales')
//          ->setVariables(array(
//            '@nid' => $nid,
//            '@locales' => implode('; ', $langs),
//          ))
//          ->setLink(l(t('Edit node'), 'node/' . $nid . '/edit'))
//          ->execute();
//
//
//        if (smartling_nodes_method($form['#node']->type)) {
//          // For nodes method.
//          $translations = translation_node_get_translations($form['#node']->tnid);
//          // Get original.
//          if (!empty($translations)) {
//            foreach ($translations as $langcode => $value) {
//              if ($translations[$langcode]->nid == $form['#node']->tnid) {
//                $original_nid = $translations[$langcode]->nid;
//                break;
//              }
//            }
//          }
//          else {
//            $original_nid = 'error';
//          }
//
//          foreach ($form_state['values']['target'] as $d_locale) {
//            if ($d_locale !== 0) {
//              $entity_data = smartling_entity_load_by_conditions(array(
//                'rid' => $original_nid,
//                'bundle' => $form['#bundle'],
//                'target_language' => $d_locale,
//              ));
//
//              if ($entity_data != FALSE) {
//                smartling_download_translate($original_nid, $d_locale, $entity_data);
//
//                $entity_data->target_language = $d_locale;
//                $entity_data->submitter = $user->uid;
//                $entity_data->submission_date = time();
//
//                smartling_entity_data_save($entity_data);
//                smartling_set_translation_status($entity_data, SMARTLING_STATUS_EVENT_DOWNLOAD_FROM_SERVICE);
//                $log->setMessage('Smartling finish force download translated file for node id - @nid, language - @language')
//                  ->setVariables(array(
//                    '@nid' => $original_nid,
//                    '@language' => $d_locale,
//                  ))
//                  ->setLink(l(t('Edit node'), 'node/' . $original_nid . '/edit'))
//                  ->execute();
//              }
//              elseif ($entity_data == FALSE || empty($entity_data->translated_file_name)) {
//                $log->setMessage('Smartling FAIL force download translated file for node id - @nid, language - @language')
//                  ->setVariables(array(
//                    '@nid' => $original_nid,
//                    '@language' => $d_locale,
//                  ))
//                  ->setLink(l(t('Edit node'), 'node/' . $original_nid . '/edit'))
//                  ->execute();
//                drupal_set_message(t('You did not send this entity to translate or that the task is in queue. Language - @language', array('@language' => $d_locale)));
//              }
//            }
//          }
//        }
//        else {
//          // For fields method.
//          foreach ($form_state['values']['target'] as $d_locale) {
//
//            if ($d_locale !== 0 && ($d_locale !== $form['#node']->language)) {
//              $entity_data = smartling_entity_load_by_conditions(array(
//                'rid' => $nid,
//                'bundle' => $form['#bundle'],
//                'target_language' => $d_locale,
//              ));
//
//              if ($entity_data != FALSE) {
//                smartling_download_translate($nid, $d_locale, $entity_data);
//
//                $entity_data->target_language = $d_locale;
//                $entity_data->submitter = $user->uid;
//                $entity_data->submission_date = time();
//
//                smartling_entity_data_save($entity_data);
//                smartling_set_translation_status($entity_data, SMARTLING_STATUS_EVENT_DOWNLOAD_FROM_SERVICE);
//                $log->setMessage('Smartling finish force download translated file for node id - @nid, language - @language')
//                  ->setVariables(array(
//                    '@nid' => $nid,
//                    '@language' => $d_locale,
//                  ))
//                  ->setLink(l(t('Edit node'), 'node/' . $nid . '/edit'))
//                  ->execute();
//              }
//              elseif ($entity_data == FALSE || empty($entity_data->translated_file_name)) {
//                $log->setMessage('Smartling FAIL force download translated file for node id - @nid, language - @language')
//                  ->setVariables(array(
//                    '@nid' => $nid,
//                    '@language' => $d_locale,
//                  ))
//                  ->setLink(l(t('Edit node'), 'node/' . $nid . '/edit'))
//                  ->execute();
//                drupal_set_message(t('You did not send this entity to translate or that the task is in queue. Language - @language', array('@language' => $d_locale)));
//              }
//            }
//          }
//        }
//        break;
//
//      case 'taxonomy_term':
//        $term = taxonomy_form_term_submit_build_taxonomy_term($form, $form_state);
//
//        $status = taxonomy_term_save($term);
//        switch ($status) {
//          case SAVED_UPDATED:
//            $log->setMessage('Updated term %term.')
//              ->setVariables(array('%term' => $term->name))
//              ->setLink(l(t('Edit term'), 'taxonomy/term/' . $term->tid . '/edit'))
//              ->execute();
//            // Clear the page and block caches to avoid stale data.
//            cache_clear_all();
//            break;
//        }
//
//        $log->setMessage('Smartling start force download translated file for taxonomy term id - @tid, locale - @locales')
//          ->setVariables(array(
//            '@tid' => $term->tid,
//            '@locales' => implode('; ', $langs),
//          ))
//          ->setLink(l(t('Edit term'), 'taxonomy/term/' . $term->tid . '/edit'))
//          ->execute();
//
//        $language_default = language_default()->language;
//        if ($term->language == $language_default) {
//          $tid = $term->tid;
//        }
//        else {
//          $original_term = smartling_get_original_entity($term->tid, $form['#entity_type']);
//          $tid = ($original_term) ? $original_term->tid : $original_term;
//        }
//
//        foreach ($form_state['values']['target'] as $d_locale) {
//          if ($d_locale !== 0) {
//            $entity_data = smartling_entity_load_by_conditions(array(
//              'rid' => $tid,
//              'entity_type' => $form['#entity_type'],
//              'target_language' => $d_locale,
//            ));
//
//            if ($entity_data != FALSE) {
//              smartling_download_translate($tid, $d_locale, $entity_data);
//
//              $entity_data->target_language = $d_locale;
//              $entity_data->submitter = $user->uid;
//              $entity_data->submission_date = time();
//
//              smartling_entity_data_save($entity_data);
//              smartling_set_translation_status($entity_data, SMARTLING_STATUS_EVENT_DOWNLOAD_FROM_SERVICE);
//              $log->setMessage('Smartling finish force download translated file for term id - @rid, language - @language')
//                ->setVariables(array('@rid' => $tid, '@language' => $d_locale))
//                ->setLink(l(t('Edit term'), 'taxonomy/term/' . $term->tid . '/edit'))
//                ->execute();
//            }
//            elseif ($entity_data == FALSE || empty($entity_data->translated_file_name)) {
//              $log->setMessage('Smartling FAIL force download translated file for term id - @rid, language - @language')
//                ->setVariables(array('@rid' => $tid, '@language' => $d_locale))
//                ->setLink(l(t('Edit term'), 'taxonomy/term/' . $term->tid . '/edit'))
//                ->execute();
//              drupal_set_message(t('You did not send this entity to translate or that the task is in queue. Language - @language', array('@language' => $d_locale)));
//            }
//          }
//        }
//
//        break;
//
//      case 'comment':
//
//        $comment = comment_form_submit_build_comment($form, $form_state);
//        $link = smartling_get_link_to_entity($comment->cid, $form['#entity_type']);
//        comment_save($comment);
//        $log->setMessage('Updated comment %comment.')
//          ->setVariables(array('%comment' => $comment->subject))
//          ->setLink($link)
//          ->execute();
//        $log->setMessage('Smartling start force download translated file for comment id - @cid, locale - @locales')
//          ->setVariables(array(
//            '@cid' => $comment->cid,
//            '@locales' => implode('; ', $langs),
//          ))
//          ->setLink($link)
//          ->execute();
//
//        foreach ($form_state['values']['target'] as $d_locale) {
//          if ($d_locale !== 0) {
//            $entity_data = smartling_entity_load_by_conditions(array(
//              'rid' => $comment->cid,
//              'entity_type' => $form['#entity_type'],
//              'target_language' => $d_locale,
//            ));
//
//            if ($entity_data != FALSE) {
//              smartling_download_translate($comment->cid, $d_locale, $entity_data);
//
//              $entity_data->target_language = $d_locale;
//              $entity_data->submitter = $user->uid;
//              $entity_data->submission_date = time();
//
//              smartling_entity_data_save($entity_data);
//              smartling_set_translation_status($entity_data, SMARTLING_STATUS_EVENT_DOWNLOAD_FROM_SERVICE);
//              $log->setMessage('Smartling finish force download translated file for comment id - @rid, language - @language')
//                ->setVariables(array(
//                  '@rid' => $comment->cid,
//                  '@language' => $d_locale,
//                ))
//                ->setLink($link)
//                ->execute();
//            }
//            elseif ($entity_data == FALSE || empty($entity_data->translated_file_name)) {
//              $log->setMessage('Smartling FAIL force download translated file for comment id - @rid, language - @language')
//                ->setVariables(array(
//                  '@rid' => $comment->cid,
//                  '@language' => $d_locale,
//                ))
//                ->setLink($link)
//                ->execute();
//              drupal_set_message(t('You did not send this entity to translate or that the task is in queue. Language - @language', array('@language' => $d_locale)));
//            }
//          }
//        }
//
//        break;
//
//      case 'user':
//
//        $account = $form['#user'];
//        $link = smartling_get_link_to_entity($account->uid, $form['#entity_type']);
//        user_save($account);
//        $log->setMessage('Updated user %user.')
//          ->setVariables(array('%user' => $account->name))
//          ->setLink($link)
//          ->execute();
//        $log->setMessage('Smartling start force download translated file for user id - @uid, locale - @locales')
//          ->setVariables(array(
//            '@uid' => $account->uid,
//            '@locales' => implode('; ', $langs),
//          ))
//          ->setLink($link)
//          ->execute();
//
//        foreach ($form_state['values']['target'] as $d_locale) {
//          if ($d_locale !== 0) {
//            $entity_data = smartling_entity_load_by_conditions(array(
//              'rid' => $account->uid,
//              'entity_type' => $form['#entity_type'],
//              'target_language' => $d_locale,
//            ));
//
//            if ($entity_data != FALSE) {
//              smartling_download_translate($account->uid, $d_locale, $entity_data);
//
//              $entity_data->target_language = $d_locale;
//              $entity_data->submitter = $user->uid;
//              $entity_data->submission_date = time();
//
//              smartling_entity_data_save($entity_data);
//              smartling_set_translation_status($entity_data, SMARTLING_STATUS_EVENT_DOWNLOAD_FROM_SERVICE);
//              $log->setMessage('Smartling finish force download translated file for user id - @rid, language - @language')
//                ->setVariables(array(
//                  '@rid' => $account->uid,
//                  '@language' => $d_locale,
//                ))
//                ->setLink($link)
//                ->execute();
//            }
//            elseif ($entity_data == FALSE || empty($entity_data->translated_file_name)) {
//              $log->setMessage('Smartling FAIL force download translated file for user id - @rid, language - @language')
//                ->setVariables(array(
//                  '@rid' => $account->uid,
//                  '@language' => $d_locale,
//                ))
//                ->setLink($link)
//                ->execute();
//              drupal_set_message(t('You did not send this entity to translate or that the task is in queue. Language - @language', array('@language' => $d_locale)));
//            }
//          }
//        }
//
//        break;
//
//      default:
//        break;
//    }
  }
  if (isset($_GET['destination'])) {
    unset($_GET['destination']);
    drupal_goto(current_path());
  }
}

/**
 * Implements hook_views_api().
 */
function smartling_views_api() {
  return array(
    'api' => 3,
  );
}

/**
 * Implements hook_cron().
 */
function smartling_cron() {
  $query = new EntityFieldQuery();
  $entities = $query->entityCondition('entity_type', 'smartling_entity_data')
    ->propertyCondition('progress', 100, '<>')
    // @TODO move 'original' to constant.
    ->propertyCondition('target_language', 'original', '<>')
    ->execute();

  if (!empty($entities['smartling_entity_data'])) {
    $log = smartling_log_get_handler();
    $smartling_queue = DrupalQueue::get('smartling_check_status');
    $smartling_queue->createQueue();
    foreach (array_keys($entities['smartling_entity_data']) as $eid => $queue_item) {
      if (!empty($queue_item->file_name)) {

        $smartling_queue->createItem($eid);
        $log->setMessage('Add item to "smartling_check_status" queue. Smartling entity data id - @eid, related entity id - @rid, entity type - @entity_type')
          ->setVariables(array(
            '@eid' => $queue_item->eid,
            '@rid' => $queue_item->rid,
            '@entity_type' => $queue_item->entity_type,
          ))
          ->execute();
//        unset($obj);
      }
      else {
        if ($queue_item->status != 0) {
          $log->setMessage('Original file name is empty. Smartling entity data id - @eid, related entity id - @rid, entity type - @entity_type')
            ->setVariables(array(
              '@eid' => $queue_item->eid,
              '@rid' => $queue_item->rid,
              '@entity_type' => $queue_item->entity_type,
            ))
            ->setSeverity(WATCHDOG_WARNING)
            ->execute();
        }
      }
    }
  }
}

/**
 * Implements hook_cron_alter().
 */
function smartling_cron_alter(&$hooks) {
  if (isset($hooks['smartling_cron'])) {
    $hooks['smartling_cron']['title'] = t('Add items to "smartling_check_status" queue.');
    $hooks['smartling_cron']['scheduler']['simple']['rules'][0] = '0+@ */3 * * *';
  }
  if (isset($hooks['queue_smartling_upload'])) {
    $hooks['queue_smartling_upload']['title'] = t('Upload files with original content.');
    $hooks['queue_smartling_upload']['scheduler']['simple']['rules'][0] = '* * * * *';
  }
  if (isset($hooks['queue_smartling_check_status'])) {
    $hooks['queue_smartling_check_status']['title'] = t('Check translation progress of files.');
    $hooks['queue_smartling_check_status']['scheduler']['simple']['rules'][0] = '* * * * *';
  }
  if (isset($hooks['queue_smartling_download'])) {
    $hooks['queue_smartling_download']['title'] = t('Download files with translations.');
    $hooks['queue_smartling_download']['scheduler']['simple']['rules'][0] = '* * * * *';
  }
}

/**
 * Implements hook_cron_queue_info().
 */
function smartling_cron_queue_info() {
  $queues['smartling_upload'] = array(
    'worker callback' => 'smartling_queue_send_to_translate_process',
  );
  $queues['smartling_check_status'] = array(
    'worker callback' => 'smartling_queue_check_status_process',
  );
  $queues['smartling_download'] = array(
    'worker callback' => 'smartling_queue_download_update_translated_item_process',
  );

  return $queues;
}

/**
 * Implements hook_entity_load().
 */
function smartling_entity_load($entities, $type) {
  $active_types = array('node', 'taxonomy_term', 'comment', 'user');
  if (in_array($type, $active_types)) {

    foreach ($entities as $entity) {
      $wrapper = entity_metadata_wrapper($type, $entity);
      $bundle = $wrapper->getBundle();
      $entity_language = entity_language($type, $entity);

      if (smartling_supported_type($type, $bundle)) {
        $sm_settings = smartling_settings_get_handler();

        foreach ($sm_settings->{$sm_settings->getByBundleMethodName($type)}($bundle) as $field_name) {

          if (smartling_field_is_translatable_by_field_name($field_name, $type) && isset($entity->{$field_name}) && !empty($entity->{$field_name}) && isset($entity->{$field_name}[LANGUAGE_NONE]) && !isset($entity->{$field_name}[$entity_language])) {
            // If field have und value and don't have need value.
            $entity->{$field_name}[$entity_language] = $entity->{$field_name}[LANGUAGE_NONE];
            field_attach_presave($type, $entity);
            field_attach_update($type, $entity);
            $entity_ids = entity_extract_ids($type, $entity);
            $entity_id = $entity_ids[0];
            $log = smartling_log_get_handler();
            $log->setMessage('Smartling adds value for field @fieldname, langcode @lang, entity - @entity, id - @id')
              ->setVariables(array(
                '@fieldname' => $field_name,
                '@lang' => $entity_language,
                '@entity' => $type,
                '@id' => $entity_id,
              ))
              ->setLink(smartling_get_link_to_entity($entity_id, $type))
              ->execute();
          }
        }
      }
    }
  }

  if ($type == 'smartling_entity_data') {
    foreach ($entities as $entity) {
      $entity->content_entity = entity_load_single($entity->entity_type, $entity->rid);
    }
  }
}

/**
 * Implements hook_entity_update().
 */
function smartling_entity_update($entity, $type) {
  switch ($type) {
    case 'node':
      if (smartling_supported_type($type, $entity->type)) {
        $smartling_entity_data = smartling_entity_load_all_by_conditions(array(
          'rid' => $entity->nid,
          'bundle' => $entity->type,
        ));
      }
      else {
        $smartling_entity_data = FALSE;
      }
      break;

    case 'taxonomy_term':
      if (smartling_supported_type($type, $entity->vocabulary_machine_name)) {
        $smartling_entity_data = smartling_entity_load_all_by_conditions(array(
          'rid' => $entity->tid,
          'bundle' => $entity->vocabulary_machine_name,
        ));
      }
      else {
        $smartling_entity_data = FALSE;
      }
      break;

    case 'comment':
      if (smartling_supported_type($type, $entity->node_type)) {
        $smartling_entity_data = smartling_entity_load_all_by_conditions(array(
          'rid' => $entity->cid,
          'bundle' => $entity->node_type,
        ));
      }
      else {
        $smartling_entity_data = FALSE;
      }
      break;

    case 'user':
      if (smartling_supported_type($type, 'user')) {
        $smartling_entity_data = smartling_entity_load_all_by_conditions(array(
          'rid' => $entity->uid,
          'bundle' => 'user',
        ));
      }
      else {
        $smartling_entity_data = FALSE;
      }
      break;

    default:
      $smartling_entity_data = FALSE;
      break;
  }

  if ($smartling_entity_data !== FALSE && is_array($smartling_entity_data)) {
    $f_name = 'smartling_' . $type . '_content_to_translate';
    $content_array = $f_name($entity);
    $content_hash = md5(serialize($content_array));
    foreach ($smartling_entity_data as $smartling_entity) {
      $old_content_hash = $smartling_entity->content_hash;

      if (!empty($old_content_hash) && ($content_hash !== $old_content_hash) && !isset($entity->send_to_smartling)) {
        smartling_set_translation_status($smartling_entity, SMARTLING_STATUS_EVENT_NODE_ENTITY_UPDATE);
      }
      $smartling_entity_changed = smartling_entity_data_load($smartling_entity->eid);
      $smartling_entity_changed->content_hash = $content_hash;
      smartling_entity_data_save($smartling_entity_changed);
    }
  }
}

/**
 * Implements hook_entity_delete().
 */
function smartling_entity_delete($entity, $type) {
  $rid = 0;
  if (isset($entity->nid)) {
    $rid = $entity->nid;
  }
  elseif (isset($entity->tid)) {
    $rid = $entity->tid;
  }
  elseif (isset($entity->cid)) {
    $rid = $entity->cid;
  }
  elseif (isset($entity->uid)) {
    $rid = $entity->uid;
  }

  db_delete('smartling_entity_data')
    ->condition('rid', $rid)
    ->condition('entity_type', $type)
    ->execute();
}

/**
 * Implements hook_views_pre_render().
 */
function smartling_views_pre_render(&$view) {
  if ($view->name == 'smartlig_report') {
    drupal_add_library('system', 'ui.progressbar');
    drupal_add_js(drupal_get_path('module', 'smartling') . '/js/smartling_admin.js');
  }
}

/**
 * Implements hook_action_info().
 */
function smartling_action_info() {
  return array(
    'smartling_do_translate_action' => array(
      'type' => 'system',
      'label' => t('Smartling entity translate.'),
      'configurable' => TRUE,
      'triggers' => array('any'),
    ),
  );
}

/**
 * Smartling do translate action.
 *
 * @param object $entity
 *   Action entity object.
 * @param array $context
 *   Context info.
 *
 * @global object $user
 *   Drupal user object.
 */
function smartling_do_translate_action($entity, array $context) {
  $entity_type = $context['entity_type'];
  $log = smartling_log_get_handler();
  global $user;

  $smartling_queue = DrupalQueue::get('smartling_upload');
  $smartling_queue->createQueue();

  switch ($entity_type) {
    case 'node':
      $link = smartling_get_link_to_entity($entity->nid, $entity_type);
      if (smartling_supported_type($entity_type, $entity->type) && smartling_translate_fields_is_set($entity->type, $entity_type)) {
        foreach ($context['translate_to_langs'] as $d_locale) {
          $d_locale_original = entity_language($entity_type, $entity);

          if (smartling_nodes_method($entity->type)) {
            $status = smartling_nodes_method_node_status($entity);

            if ($status == SMARTLING_ORIGINAL_NODE || $status == SMARTLING_ORIGINAL_WITHOUT_TRANSLATION_NODE) {
              if ($entity->tnid == '0') {
                $entity->tnid = $entity->nid;
                node_save($entity);
              }

              if ($d_locale != entity_language($entity_type, $entity)) {

                $entity_data = smartling_entity_load_by_conditions(array(
                  'rid' => $entity->nid,
                  'entity_type' => $entity_type,
                  'target_language' => $d_locale,
                ));

                if ($entity_data == FALSE) {
                  $entity_data = smartling_entity_data_create();
                  $entity_data->rid = $entity->nid;
                  $entity_data->bundle = $entity->type;
                  $entity_data->entity_type = $entity_type;
                  $entity_data->original_language = $d_locale_original;
                  $entity_data->target_language = $d_locale;
                  $entity_data->progress = 0;
                }

                $entity_data->translated_file_name = FALSE;
                $entity_data->submitter = $user->uid;
                $entity_data->submission_date = time();
                smartling_entity_data_save($entity_data);

                $d_locales[] = $d_locale;
                smartling_set_translation_status($entity_data, SMARTLING_STATUS_EVENT_SEND_TO_UPLOAD_QUEUE);
              }
            }
          }
          elseif (smartling_fields_method($entity->type)) {

            if ($d_locale != entity_language($entity_type, $entity)) {

              $entity_data = smartling_entity_load_by_conditions(array(
                'rid' => $entity->nid,
                'entity_type' => $entity_type,
                'target_language' => $d_locale,
              ));

              if ($entity_data == FALSE) {
                $entity_data = smartling_entity_data_create();
                $entity_data->rid = $entity->nid;
                $entity_data->bundle = $entity->type;
                $entity_data->entity_type = $entity_type;
                $entity_data->original_language = $d_locale_original;
                $entity_data->target_language = $d_locale;
                $entity_data->progress = 0;
              }

              $entity_data->translated_file_name = FALSE;
              $entity_data->submitter = $user->uid;
              $entity_data->submission_date = time();
              smartling_entity_data_save($entity_data);

              $d_locales[] = $d_locale;
              smartling_set_translation_status($entity_data, SMARTLING_STATUS_EVENT_SEND_TO_UPLOAD_QUEUE);
            }
          }
        }

        $smartling_queue->createItem($entity_data->eid);
      }
      else {
        drupal_set_message(t('Not support type or Smartling configuration problem for content type - @type.', array('@type' => $entity->type)), 'warning');
        $log->setMessage('Not support type or Smartling configuration problem for content type - @type.')
          ->setVariables(array('@type' => $entity->type))
          ->setConsiderLog(FALSE)
          ->setSeverity(WATCHDOG_ERROR)
          ->setLink($link)
          ->execute();
      }

      break;

    case 'taxonomy_term':
      $link = smartling_get_link_to_entity($entity->tid, $entity_type);

      if (smartling_supported_type($entity_type, $entity->vocabulary_machine_name) && smartling_translate_fields_is_set($entity->vocabulary_machine_name, $entity_type)) {
        $language_default = language_default()->language;

        if (entity_language($entity_type, $entity) == $language_default) {
          $tid = $entity->tid;
        }
        else {
          $original_term = smartling_get_original_entity($entity->tid, $entity_type);
          $tid = $original_term->tid;
        }

        $d_locale_original = $language_default;

        foreach ($context['translate_to_langs'] as $d_locale) {
          if ($language_default !== $d_locale) {

            $entity_data = smartling_entity_load_by_conditions(array(
              'rid' => $tid,
              'entity_type' => $entity_type,
              'target_language' => $d_locale,
            ));

            if ($entity_data == FALSE) {
              $entity_data = smartling_entity_data_create();
              $entity_data->rid = $tid;
              $entity_data->entity_type = $entity_type;
              $entity_data->bundle = $entity->vocabulary_machine_name;
              $entity_data->original_language = $d_locale_original;
              $entity_data->target_language = $d_locale;
              $entity_data->progress = 0;
            }

            $entity_data->translated_file_name = FALSE;
            $entity_data->submitter = $user->uid;
            $entity_data->submission_date = time();
            smartling_entity_data_save($entity_data);

            smartling_set_translation_status($entity_data, SMARTLING_STATUS_EVENT_SEND_TO_UPLOAD_QUEUE);
            $d_locales[] = $d_locale;
          }
        }

        // Create queue item.
        $smartling_queue->createItem($entity_data->eid);
      }
      else {
        drupal_set_message(t('Not support vocabulary - @vocabulary.', array('@vocabulary' => $entity->vocabulary_machine_name)), 'warning');
        $log->setMessage('Not support vocabulary - @vocabulary.')
          ->setVariables(array('@vocabulary' => $entity->vocabulary_machine_name))
          ->setConsiderLog(FALSE)
          ->setSeverity(WATCHDOG_ERROR)
          ->setLink($link)
          ->execute();
      }

      break;

    case 'comment':
      $link = smartling_get_link_to_entity($entity->cid, $entity_type);

      if (smartling_supported_type($entity_type, $entity->node_type) && smartling_translate_fields_is_set($entity->node_type, $entity_type)) {
        $d_locale_original = $entity->translations->original;
        foreach ($context['translate_to_langs'] as $d_locale) {
          if ($d_locale_original !== $d_locale) {
            $entity_data = smartling_entity_load_by_conditions(array(
              'rid' => $entity->cid,
              'entity_type' => $entity_type,
              'target_language' => $d_locale,
            ));

            if ($entity_data == FALSE) {
              $entity_data = smartling_entity_data_create();
              $entity_data->rid = $entity->cid;
              $entity_data->entity_type = $entity_type;
              $entity_data->bundle = $entity->node_type;
              $entity_data->original_language = $d_locale_original;
              $entity_data->target_language = $d_locale;
              $entity_data->progress = 0;
            }

            $entity_data->translated_file_name = FALSE;
            $entity_data->submitter = $user->uid;
            $entity_data->submission_date = time();
            smartling_entity_data_save($entity_data);

            smartling_set_translation_status($entity_data, SMARTLING_STATUS_EVENT_SEND_TO_UPLOAD_QUEUE);
            $d_locales[] = $d_locale;
          }
        }

        $smartling_queue->createItem($entity_data->eid);
      }
      else {
        drupal_set_message(t('Not support comment - @comment.', array('@comment' => $entity->node_type)), 'warning');
        $log->setMessage('Not support comment - @comment.')
          ->setVariables(array('@comment' => $entity->node_type))
          ->setConsiderLog(FALSE)
          ->setSeverity(WATCHDOG_ERROR)
          ->setLink($link)
          ->execute();
      }

      break;

    case 'user':
      $link = smartling_get_link_to_entity($entity->uid, $entity_type);
      $d_locale_original = $entity->translations->original;

      if (smartling_supported_type($entity_type, 'user') && smartling_translate_fields_is_set('user', $entity_type)) {
        foreach ($context['translate_to_langs'] as $d_locale) {

          if ($d_locale_original !== $d_locale) {
            $entity_data = smartling_entity_load_by_conditions(array(
              'rid' => $entity->uid,
              'entity_type' => $entity_type,
              'target_language' => $d_locale,
            ));

            if ($entity_data == FALSE) {
              $entity_data = smartling_entity_data_create();
              $entity_data->rid = $entity->uid;
              $entity_data->entity_type = $entity_type;
              $entity_data->bundle = 'user';
              $entity_data->original_language = $d_locale_original;
              $entity_data->target_language = $d_locale;
              $entity_data->progress = 0;
            }

            $entity_data->translated_file_name = FALSE;
            $entity_data->submitter = $user->uid;
            $entity_data->submission_date = time();
            smartling_entity_data_save($entity_data);

            smartling_set_translation_status($entity_data, SMARTLING_STATUS_EVENT_SEND_TO_UPLOAD_QUEUE);
            $d_locales[] = $d_locale;
          }
        }

        $smartling_queue->createItem($entity_data->eid);
      }
      else {
        drupal_set_message(t('Users do not translatable fields.'), 'warning');
        $log->setMessage('Users do not translatable fields.')
          ->setConsiderLog(FALSE)
          ->setSeverity(WATCHDOG_ERROR)
          ->setLink($link)
          ->execute();
      }

      break;

    default:
      break;
  }
  // Create content hash (Fake entity update).
  smartling_entity_update($entity, $entity_type);
}

/**
 * Smartling do translate action form.
 *
 * @param array $context
 *   Context info array.
 * @param array $form_state
 *   FAPI array.
 *
 * @return array
 *   Return FAPI array for smartling do translate action form.
 */
function smartling_do_translate_action_form(array $context, array &$form_state) {
  $form['do_translate_action']['languages'] = array(
    '#type' => 'checkboxes',
    '#options' => smartling_language_options_list(),
    '#title' => t('Check language'),
  );
  return $form;
}

/**
 * Smartling do translate action form - Form Validate.
 *
 * @param array $form
 *   FAPI array.
 * @param array $form_state
 *   FAPI array.
 */
function smartling_do_translate_action_validate(array $form, array &$form_state) {
  $select_languages = array();
  if (!empty($form_state['input']['languages'])) {
    foreach ($form_state['input']['languages'] as $d_locale) {

      if (!is_null($d_locale) && !empty($d_locale)) {
        $select_languages[] = $d_locale;
      }
    }
  }

  if (!empty($select_languages) && (count($select_languages) > 0)) {
    $form_state['translate_to_langs'] = $select_languages;
  }
  else {
    form_set_error('languages', t('Check language, please.'));
  }
}

/**
 * Smartling do translate action form - Form Submit.
 *
 * @param array $form
 *   FAPI array.
 * @param array $form_state
 *   FAPI array.
 *
 * @return array
 *   Return array with languages to translate.
 */
function smartling_do_translate_action_submit(array $form, array $form_state) {
  $count_op = count($form_state['selection']);
  $log = smartling_log_get_handler();
  $log->setMessage(format_plural($count_op, 'Smartling Bulk Submit - add 1 entity to queue', 'Smartling Bulk Submit - add @count entities to queue'))
    ->execute();
  return array('translate_to_langs' => $form_state['translate_to_langs']);
}

/**
 * Smartling push callback access function.
 *
 * @param string $key
 *   Drupal cron key.
 *
 * @return bool
 *   Return TRUE if user have access.
 */
function smartling_push_callback_access($key) {
  return (variable_get('cron_key', 'drupal') == $key && empty($_POST));
}

/**
 * Smartling push callback function.
 */
function smartling_push_callback() {
  $log = smartling_log_get_handler();
  $log->setMessage('Smartling starts to process callback request')->execute();

  if (isset($_GET['locale']) && isset($_GET['fileUri'])) {
    $d_locale = check_plain(smartling_convert_locale_drupal_to_smartling($_GET['locale'], TRUE));
    $file_uri = smartling_clean_filename($_GET['fileUri']);

    $log->setMessage('Smartling get parameters: locale - @locale, fileUri - @fileUri')
      ->setVariables(array('@locale' => $d_locale, '@fileUri' => $file_uri))
      ->execute();

    $entity_data = smartling_entity_load_by_conditions(array(
      'target_language' => $d_locale,
      'file_name' => $file_uri,
    ));

    if ($entity_data != FALSE) {
      if (module_exists('rules')) {
        rules_invoke_event('smartling_callback_call_event', $d_locale, $file_uri);
      }

      smartling_download_translate($entity_data->rid, $d_locale, $entity_data);
      smartling_set_translation_status($entity_data, SMARTLING_STATUS_EVENT_DOWNLOAD_FROM_SERVICE);

      $log->setMessage('The callback function smartling downloaded translation for bundle - @bundle, entity id - @rid, language - @language')
        ->setVariables(array(
          '@bundle' => $entity_data->bundle,
          '@rid' => $entity_data->rid,
          '@language' => $d_locale,
        ))
        ->setLink(l(t('Edit node'), 'node/' . $entity_data->rid . '/edit'))
        ->execute();
    }
    elseif ($entity_data == FALSE) {
      $log->setMessage('For the parameters locale - @locale and fileUri - @fileUri entity smartling are missing')
        ->setVariables(array('@locale' => $d_locale, '@fileUri' => $file_uri))
        ->setSeverity(WATCHDOG_WARNING)
        ->execute();
      // 404.
    }
  }
  else {
    $params = array('locale', 'fileUri');
    foreach ($params as $param) {
      if (!isset($_GET[$param])) {
        $log->setMessage('Smartling GET parameter "@param_name" are missing')
          ->setVariables(array('@param_name' => $param))
          ->setSeverity(WATCHDOG_WARNING)
          ->execute();
        // 404.
      }
    }
  }
}

/**
 * Returns modified content after it was processed by Smartling alter functions.
 *
 * Internally function retrieves a string of content with some
 * context where this string came from for translation,
 * invokes hook_smartling_data_processor_info and processes it.
 *
 * @param string $content
 *   Content.
 * @param string $lang
 *   Language.
 * @param string $field_name
 *   Field name.
 * @param object $entity
 *   Entity object.
 * @param bool $reset
 *   Reset.
 *
 * @deprecated
 *
 * @return string
 *   Return content.
 */
function smartling_process_content($content, $lang, $field_name, $entity, $reset = FALSE) {

  $handlers = & drupal_static(__FUNCTION__);
  if (!isset($actions) || $reset) {
    $handlers = module_invoke_all('smartling_data_processor_info');
    drupal_alter('smartling_data_processor_info', $handlers);
  }

  foreach ($handlers as $parser => $processors) {
    if (!class_exists('Drupal\\smartling\\Alters\\' . $parser)) {
      continue;
    }

    $processors_objs = array();
    foreach ($processors as $proc) {
      if (class_exists($proc) && in_array('SmartlingContentProcessorInterface', class_implements($proc))) {
        $processors_objs[] = new $proc();
      }
    }

    if (!empty($processors_objs)) {
      $parser = new $parser($processors_objs);
      $content = $parser->parse($content, $lang, $field_name, $entity);
    }
  }

  return $content;
}

/**
 * Create Smartling entity.
 *
 * @param stdClass $entity
 *   Drupal content entity.
 * @param string $entity_type
 *   Drupal entity type machine name.
 * @param string $origin_language
 *   Language key of source drupal content entity.
 * @param string $target_language
 *   Target language key for smartling entity.
 *
 * @return SmartlingEntityData
 *
 * @todo try to avoid original language in arguments.
 */
function smartling_create_from_entity($drupal_entity, $entity_type, $origin_language, $target_language) {
  global $user;
  $entity_data = smartling_entity_data_create();
  $wrapper = entity_metadata_wrapper($entity_type, $drupal_entity);
  $entity_data->rid = $wrapper->getIdentifier();
  $entity_data->entity_type = $entity_type;
  $entity_data->bundle = $wrapper->getBundle();
  $entity_data->original_language = $origin_language;
  $entity_data->target_language = $target_language;
  $entity_data->progress = 0;

  $entity_data->translated_file_name = FALSE;
  $entity_data->submitter = $user->uid;
  $entity_data->submission_date = time();
  smartling_entity_data_save($entity_data);

  return $entity_data;
}


/**
 * Implements hook_smartling_settings_form_info().
 *
 * @return array
 */
function smartling_smartling_settings_form_info() {
  $forms = array(
    'smartling_admin_account_info_settings_form' => t('Account info'),
    'smartling_admin_node_translation_settings_form' => t('Content types and fields'),
    'smartling_admin_taxonomy_translation_settings_form' => t('Taxonomy vocabularies and fields'),
    'smartling_admin_comments_translation_settings_form' => t('Comment fields'),
    'smartling_admin_users_translation_settings_form' => t('User fields'),
    'smartling_admin_log_info_settings_form' => t('Smartling log'),
  );


  if (module_exists('smartling_load_test')) {
    $forms['smartling_admin_dev_settings_form'] = t('Dev settings');
  }
  if (module_exists('smartling_reference')) {
    $forms['smartling_admin_reference_settings_form'] = t('References settings');
  }
  if (module_exists('field_collection')) {
    $forms['smartling_admin_field_collection_settings_form'] = t('Field Collection settings');
  }

  return $forms;
}
