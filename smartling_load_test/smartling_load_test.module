<?php

/**
 * @file
 * Code for the Smartling load test feature.
 */

include_once 'smartling_load_test.features.inc';

/**
 * Smartling dev settings form.
 *
 * @param array $form
 *   FAPI array.
 * @param array $form_state
 *   FAPI array.
 *
 * @return array
 *   Return FAPI array for user smartling form.
 */
function smartling_admin_dev_settings_form(array $form, array &$form_state) {
  $query = db_select('node', 'n');
  $query->addExpression('COUNT(n.nid)');
  $count = $query->condition('n.type', 'smartling_load_test')
    ->execute()
    ->fetchCol();
  $count = $count[0];

  $form['dev_info']['load_tests'] = array(
    '#type' => 'item',
    '#title' => t('Load tests'),
    '#markup' => 'Nodes count: ' . $count,
  );
  $form['dev_info']['load_tests_submit'] = array(
    '#type' => 'submit',
    '#name' => 'load_tests_submit',
    '#value' => t('Generate 10K nodes'),
  );
  $form['dev_info']['cleanup_load_tests_submit'] = array(
    '#type' => 'submit',
    '#name' => 'cleanup_load_tests_submit',
    '#value' => t('CleanUp test nodes'),
  );
  $form['dev_info']['cleanup_all'] = array(
    '#type' => 'item',
    '#title' => t('Cleanup all nodes'),
    '#markup' => 'Cleanup all smartling content',
  );
  $form['dev_info']['cleanup_all_submit'] = array(
    '#type' => 'submit',
    '#name' => 'cleanup_all_submit',
    '#attributes' => array('class' => array('confirm-delete-ajax-submit')),
    '#value' => t('CleanUp all nodes'),
  );
  $form['#submit'][] = 'smartling_admin_dev_settings_form_submit';

  return $form;
}

/**
 * Smartling dev settings form - Form Submit.
 *
 * @param array $form
 *   FAPI array.
 * @param array $form_state
 *   FAPI array.
 */
function smartling_admin_dev_settings_form_submit(array $form, array &$form_state) {
  $log = smartling_log_get_handler();
  if ($form_state['clicked_button']['#name'] == 'load_tests_submit') {
    for ($i = 0; $i < 10000; $i++) {
      $operations[] = array('smartling_create_load_test_node_batch', array());
    }
    $batch = array(
      'title' => t('Create Smartling load-tests content'),
      'operations' => $operations,
    );
    batch_set($batch);
    $log->setMessage('Create 10000 load-tests nodes submit')->execute();
  }

  if ($form_state['clicked_button']['#name'] == 'cleanup_load_tests_submit') {
    $query = db_select('node', 'n');
    $result = $query->condition('n.type', 'smartling_load_test')
      ->fields('n', array('nid'))
      ->execute()
      ->fetchCol();
    if (!empty($result)) {
      foreach ($result as $nid) {
        $operations[] = array('smartling_delete_load_test_node_batch', array($nid));
      }

      $batch = array(
        'title' => t('Delete Smartling load-tests content'),
        'operations' => $operations,
      );
      batch_set($batch);
    }
    $log->setMessage('Delete all load-tests nodes submit')->execute();
  }

  if ($form_state['clicked_button']['#name'] == 'cleanup_all_submit') {
    $query = db_select('smartling_entity_data', 'sed');
    $result = $query->fields('sed', array('eid'))
      ->execute()
      ->fetchCol();

    $queue_upload = DrupalQueue::get('smartling_upload');
    $queue_upload->deleteQueue();
    $queue_check = DrupalQueue::get('smartling_check_status');
    $queue_check->deleteQueue();
    $queue_download = DrupalQueue::get('smartling_download');
    $queue_download->deleteQueue();

    if (!empty($result)) {
      foreach ($result as $eid) {
        $operations[] = array('smartling_delete_smartling_content_batch', array($eid));
      }

      $batch = array(
        'title' => t('Delete Smartling translated content'),
        'operations' => $operations,
      );
      batch_set($batch);
    }
    $log->setMessage('Cleanup all submit')->execute();
  }
}

/**
 * Create load test node batch.
 *
 * @global object $user
 *   Drupal user object.
 */
function smartling_create_load_test_node_batch() {
  module_load_include('inc', 'devel_generate', 'devel_generate');
  global $user;

  $lang = language_default();

  $node = new stdClass();
  $node->type = 'smartling_load_test';
  node_object_prepare($node);
  $node->title = devel_create_greeking(mt_rand(2, 5), TRUE);
  $node->language = $lang->language;
  $node->uid = $user->uid;
  $node->status = NODE_PUBLISHED;
  $node->created = REQUEST_TIME - mt_rand(0, 604800);

  // Populate all core fields on behalf of field.module
  module_load_include('inc', 'devel_generate', 'devel_generate.fields');
  devel_generate_fields($node, 'node', $node->type);

  node_save($node);
}

/**
 * Delete node by id.
 *
 * @param int $nid
 *   Node id.
 */
function smartling_delete_load_test_node_batch($nid) {
  node_delete($nid);
}

/**
 * Delete smartling transaction by id.
 *
 * @param int $eid
 *   Smartling transaction id.
 */
function smartling_delete_smartling_content_batch($eid) {
  $entity_data = smartling_entity_data_load($eid);

  if (!empty($entity_data->bundle)) {
    if (smartling_nodes_method($entity_data->bundle)) {
      // If nodes method.
      $translations = translation_node_get_translations($entity_data->rid);

      if (is_array($translations)) {
        foreach ($translations as $value) {
          if ($entity_data->rid != $value->nid) {
            node_delete($value->nid);
          }
        }
        smartling_entity_data_delete_multiple(array($entity_data->eid));
      }
    }
    elseif (smartling_fields_method($entity_data->bundle)) {
      // If fields method.
      $d_locale_target_language = $entity_data->target_language;
      $entity = entity_load_single('node', $entity_data->rid);

      foreach (field_info_instances('node', $entity_data->bundle) as $field) {
        $field_machine_name = $field['field_name'];

        if (isset($entity->{$field_machine_name}[$d_locale_target_language])) {
          $count = count($entity->{$field_machine_name}[$d_locale_target_language]);
          // Remove the field value.
          if ($count == 1) {
            // Single value.
            unset($entity->{$field_machine_name}[$d_locale_target_language][0]);
          }
          elseif ($count > 1) {
            // Multiple value.
            for ($i = 0; $i < $count; $i++) {
              unset($entity->{$field_machine_name}[$d_locale_target_language][$i]);
            }
          }

          // Reset the array to zero-based sequential keys.
          $entity->{$field_machine_name}[$d_locale_target_language] = array_values($entity->{$field_machine_name}[$d_locale_target_language]);
        }
        // Save the entity.
        entity_save('node', $entity);
      }
      smartling_entity_data_delete_multiple(array($entity_data->eid));
    }
  }
  else {
    smartling_entity_data_delete_multiple(array($eid));
  }
}
