<?php

/**
 * @file
 * Tests for smartling
 */
class SmartlingWebTestCase extends DrupalWebTestCase {

  public function setUp() {
    // Enable Smartling modules
    parent::setUp('smartling', 'smartling_reports');

    // Create a user with access
    $this->privileged_user = $this->drupalCreateUser(array(
      'administer smartling',
      'administer taxonomy',
      'administer ultimate cron',
      'translate interface',
      'translate content',
      'use text format filtered_html',
      'use text format full_html',
      'administer languages',
      'access administration pages',
      'access site reports',
      'administer content types',
      'administer nodes',
      'access content',
      'bypass node access',
      'edit any page content',
      'edit any article content',
    ));

    // Authorizing user
    $this->drupalLogin($this->privileged_user);

    // Add predefined language.
    $edit = array(
      'langcode' => 'ru',
    );
    $this->drupalPost('admin/config/regional/language/add', $edit, t('Add language'));
    $this->assertText('ru', 'Language added successfully.');
  }

  public function smartlingCreateNode($type = 'page', $settings = array()) {
    // Create initial node.
    $this->random_node_title = $this->randomName(8);
    $base_settings = array(
      'title' => $this->random_node_title,
      'comment' => 0,
      'changed' => REQUEST_TIME,
      'moderate' => 0,
      'promote' => 0,
      'revision' => 1,
      'log' => '',
      'status' => 1,
      'sticky' => 0,
      'type' => $type,
      'revisions' => NULL,
      'language' => 'en',
    );

    $base_settings['body'][$base_settings['language']][0]['value'] = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Etiam vitae arcu at leo cursus laoreet. Curabitur dui tortor, adipiscing malesuada tempor in, bibendum ac diam.';

    if (empty($settings)) {
      $this->drupalCreateNode($base_settings);
    }
    else {
      $this->drupalCreateNode($settings);
    }
  }

  public function smartlingSetCorrectSettings() {
    // Set file public path for tests
    variable_set('file_public_path', 'sites/default/files');
    // Add default private path
    variable_set('file_private_path', 'sites/default/files/private');

    $edit = array(
      "target_locales[ru]" => 'ru',
      "project_id" => '1295c174d',
      "smartling_key" => '5d75ab84-f189-43e0-be79-153d6c220dde',
      "target_locales_text_key_ru" => 'ru-RU',
      "default_language_format" => 'en-US',
    );
    $this->drupalPost('admin/config/regional/smartling', $edit, t('Save'), array(), array(), 'smartling-admin-account-info-settings-form');
    $this->assertText(t('Account settings saved.'));
  }

  /**
   * These values are supported for value:
   *   - 0
   *   - 1
   * @param string $field_name
   * @param int $value
   */
  public function smartlingSetTranslatableFieldSettings($field_name, $value) {
    $field = field_info_field($field_name);
    $field['translatable'] = $value;
    field_update_field($field);
  }

  public function smartlingGetTranslatableFieldSettings($field_name) {
    $field = field_info_field($field_name);
    if (isset($field['translatable'])) {
      return $field['translatable'];
    }
    else {
      $this->error(t('Field @field_name do not have translatable parameter.', array('@field_name' => $field_name)));
      return 'error';
    }
  }

  /**
   * Defaults to 'published'. These values are supported:
   *   - 'pseudo'
   *   - 'published'
   *   - 'pending'
   * @param string $type
   */
  public function smartlingSetRetrievalType($type = 'published') {
    if (!empty($type)) {
      $edit = array(
        "production_retrieval_type" => (string) $type,
      );
      $this->drupalPost('admin/config/regional/smartling', $edit, t('Save'), array(), array(), 'smartling-admin-account-info-settings-form');
      $this->assertText(t('Account settings saved.'));
    }
  }

  /**
   *
   * @param string $node_type
   * 'page' by default
   * @param string $field_machine_name
   * '' by default
   */
  public function smartlingAddTextFieldToNode($node_type = 'page', $field_machine_name = '') {
    if (!empty($field_machine_name)) {
      // Add field to CT
      $edit = array(
        "fields[_add_new_field][label]" => (string) $field_machine_name,
        "fields[_add_new_field][weight]" => '-2',
        "fields[_add_new_field][field_name]" => (string) $field_machine_name,
        "fields[_add_new_field][type]" => 'text',
        "fields[_add_new_field][widget_type]" => 'text_textfield',
      );
      $this->drupalPost('admin/structure/types/manage/' . $node_type . '/fields', $edit, t('Save'));
      $this->drupalPost(NULL, array(), t('Save field settings'));
      $this->drupalPost(NULL, array(), t('Save settings'));
      $this->assertText(t('Saved @field configuration.', array('@field' => $field_machine_name)));
    }
  }

  public function smartlingAddSiteLanguage($lang = 'ru') {
    // Add predefined languages.
    $edit = array(
      'langcode' => $lang,
    );
    $this->drupalPost('admin/config/regional/language/add', $edit, t('Add language'));
    $this->assertText($lang, 'Language added successfully.');
  }

  public function smartlingDifferentFieldsSetUpTest() {
    // Start Set Up
    // Set correct account settings
    $this->smartlingSetCorrectSettings();
    // Set pseudo for smartling
    $this->smartlingSetRetrievalType('pseudo');
    // Add field
    $this->smartlingAddTextFieldToNode('page', 'translatable_data');
    // Add field
    $this->smartlingAddTextFieldToNode('page', 'not_translatable_data');

    // Set nodes method for CT
    $edit = array();
    $edit['page_TT_page'] = 2;
    $this->drupalPost('admin/config/regional/smartling', $edit, t('Save'), array(), array(), 'smartling-admin-node-translation-settings-form');
    $this->assertText(t('Your content types have been updated.'));

    // Set fields for page CT
    $edit = array();
    $edit['page_SEPARATOR_field_translatable_data'] = 1;
    $this->drupalPost('admin/config/regional/smartling', $edit, t('Save'), array(), array(), 'smartling-admin-node-translation-settings-form');
    $this->assertText(t('Your content types have been updated.'));
    // End Set Up
  }

  /**
   * Send node to Smartling service and download them. Works for a single node on the site.
   * @param type $nid
   * @param array $langs
   * Example: array('ru', 'nl')
   */
  public function smartlingTranslateNode($nid, $langs) {
    $node = node_load($nid);
    if ($node) {
      // Send node to smartling
      foreach ($langs as $lang) {
        $edit['target[' . $lang . ']'] = $lang;
        $convert_array[] = smartling_convert_locale_drupal_to_smartling($lang);
      }

      $this->drupalPost('node/' . $nid . '/edit', $edit, t('Send to Smartling'));
      $this->assertText(t('The node "@title" has been sent to Smartling for translation to "@langs".', array(
        '@title' => $node->title,
        '@langs' => implode(', ', $convert_array)
      )));

      // Run cron
      $cron = FALSE;
      while (!$cron) {
        $cron = drupal_cron_run();
      }

      // Go to report-in-progress and download
      $this->drupalGet('admin/content/smartling/report-in-progress');
      $this->clickLink('Download');
      foreach ($convert_array as $s_locale) {
        $this->assertText(t('Downloaded for language translation @locale', array('@locale' => $s_locale)));
      }
    }
  }

}
