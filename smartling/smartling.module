<?php

/**
 * @file
 * The Smartling module file.
 */
define('SMARTLING_FIELDS_METHOD_KEY', '4');
define('SMARTLING_NODES_METHOD_KEY', '2');

define('SMARTLING_TRANSLATE_NODE', 'smartling_translate_node');
define('SMARTLING_ORIGINAL_NODE', 'smartling_original_node');
define('SMARTLING_ORIGINAL_WITHOUT_TRANSLATION_NODE', 'smartling_original_without_translation_node');

define('SMARTLING_STATUS_IN_QUEUE', 0);
define('SMARTLING_STATUS_IN_TRANSLATE', 1);
define('SMARTLING_STATUS_TRANSLATED', 2);
define('SMARTLING_STATUS_CHANGE', 3);
define('SMARTLING_STATUS_FAILED', 4);
define('SMARTLING_STATUS_EVENT_SEND_TO_UPLOAD_QUEUE', 'smartling_send_node_to_upload_queue');
define('SMARTLING_STATUS_EVENT_FAILED_UPLOAD', 'smartling_send_node_failed_upload');
define('SMARTLING_STATUS_EVENT_UPLOAD_TO_SERVICE', 'smartling_upload_node_to_service');
define('SMARTLING_STATUS_EVENT_DOWNLOAD_FROM_SERVICE', 'smartling_download_node_from_service');
define('SMARTLING_STATUS_EVENT_UPDATE_FIELDS', 'smartling_update_node_fields');
define('SMARTLING_STATUS_EVENT_NODE_ENTITY_UPDATE', 'check_status_in_node_entity_update');

define('SMARTLING_PRODUCTION_MODE', 'PRODUCTION');
define('SMARTLING_DEFAULT_API_URL', 'https://capi.smartling.com/v1');

include_once('smartling.utils.inc');
include_once('includes/smartling_settings.handler.inc');
include_once('smartling.processing.inc');
include_once('includes/smartling.workers.inc');
include_once('includes/smartling.entity.inc');
include_once('includes/smartling_translation.handler.inc');
include_once('includes/smartling.entityController.inc');
include_once('views/smartling.views.inc');
include_once('views/smartling_handler_field_target_language.inc');
include_once('views/smartling_handler_field_locale_info.inc');
include_once('views/smartling_handler_field_smartling_title.inc');
include_once('views/smartling_handler_field_smartling_operations.inc');
include_once('views/smartling_handler_filter_entity_status.inc');
include_once('entities/smartling.taxonomy.inc');
include_once('entities/smartling.node.inc');
include_once('entities/smartling.comments.inc');
include_once('entities/smartling.user.inc');
include_once('api/lib/SmartlingAPI.php');
include_once('api/lib/HttpClient.php');
include_once('api/lib/FileUploadParameterBuilder.php');

include_once('smartling.demo_content.php');

/**
 * Implements hook_menu().
 */
function smartling_menu() {
  $items = array();

  $items['admin/config/regional/smartling'] = array(
    'title' => 'Smartling settings',
    'weight' => -99,
    'type' => MENU_NORMAL_ITEM,
    'file' => 'smartling.admin.inc',
    'page callback' => 'smartling_admin_configuration_view',
    'access arguments' => array('administer smartling'),
  );

  $items['smartling/download/%/%'] = array(
    'title' => 'Smartling settings',
    'type' => MENU_CALLBACK,
    'page arguments' => array(2, 3),
    'page callback' => 'smartling_download_translate_form_submission_form',
    'access arguments' => array('administer smartling'),
  );

  $items['smartling/translatable/%'] = array(
    'title' => 'Smartling AJAX callback - set field settings',
    'type' => MENU_CALLBACK,
    'page arguments' => array(2),
    'page callback' => 'smartling_translatable_field_ajax_callback',
    'access arguments' => array('administer smartling'),
    'theme callback' => 'ajax_base_page_theme',
    'delivery callback' => 'ajax_deliver',
  );

  $items['smartling'] = array(
    'title' => 'Smartling settings',
    'type' => MENU_CALLBACK,
    'page callback' => 'smartling_download_translate_simple_callback',
    'page arguments' => array(2, 3),
    'access arguments' => array('administer smartling'),
  );

  if (variable_get('smartling_callback_url_use', TRUE)) {
    $items['smartling/callback/%'] = array(
      'title' => 'Smartling push',
      'type' => MENU_CALLBACK,
      'page callback' => 'smartling_push_callback',
      'access callback' => 'smartling_push_callback_access',
      'access arguments' => array(2),
    );
  }

  return $items;
}

/**
 * Simple menu callback to register smartling paths in menu router, to avoid problems with fast_404 module.
 */
function smartling_download_translate_simple_callback() {
  return '';
}

function smartling_translatable_field_ajax_callback($field_name, $mode) {
  // If no javascript
  if ($mode != 'ajax') {
    drupal_set_message('Turn Javascript');
    drupal_goto(isset($_SERVER['HTTP_REFERER']) ? $_SERVER['HTTP_REFERER'] : '<front>');
  }

  $field = field_info_field($field_name);
  $field['translatable'] = 0;
  field_update_field($field);
  unset($field);
  drupal_set_message(t('Field @field_name settings update', array('@field_name' => $field_name)));

  $smartling_translate_fields = variable_get('smartling_translate_fields', FALSE);
  $fix_field_settings = array();
  $raw_types = node_type_get_types();

  foreach ($raw_types as $value) {
    $node_type = $value->type;

    foreach (field_info_instances('node', $node_type) as $field) {
      if (smartling_nodes_method($node_type) && smartling_field_is_translatable_by_field_name($field['field_name']) && isset($smartling_translate_fields[$node_type][$field['field_name']]) && !in_array($field['field_name'], $fix_field_settings)) {
        $fix_field_settings[$field['field_name']] = l($field['label'], 'smartling/translatable/' . $field['field_name'] . '/nojs', array(
          'attributes' => array(
            'class' => array('use-ajax', 'smartling-translatable-' . $field['field_name']),
            'title' => t('Fix field settings'),
        )));
      }
    }
  }

  if (!empty($fix_field_settings) && is_array($fix_field_settings)) {
    $new_html_fix = '<div id="smartling-untranslatable-fix">' . t('Following field(s) should be set as untranslatable for node translation: !fields. Click on field name to fix.', array('!fields' => implode(', ', $fix_field_settings))) . '</div>';
    $commands[] = ajax_command_replace('#smartling-untranslatable-fix', $new_html_fix);
  }
  else {
    $commands[] = ajax_command_remove('#smartling-untranslatable-fix');
  }

  $commands[] = ajax_command_remove('div.messages');
  $commands[] = ajax_command_before('.region-content', theme('status_messages'));
  $page = array('#type' => 'ajax', '#commands' => $commands);
  return $page;
}

function smartling_download_translate_form_submission_form($rid, $d_locale = '', $entity_data = NULL) {
  smartling_download_translate($rid, $d_locale, $entity_data);
  // TODO : Make a wrapper for unset + drupal_goto
  unset($_GET['destination']);
  drupal_goto('admin/content/smartling/report-in-progress');
}

/**
 * Implements hook_permission().
 */
function smartling_permission() {
  $permissions = array(
    'administer smartling' => array(
      'title' => t('Administer Smartling'),
      'description' => t('Access the administrative settings for the module.')
    ),
    'administer smartling_entity_data entities' => array(
      'title' => t('Administer Smartling Entity Data entities'),
    ),
    'view any smartling_entity_data entity' => array(
      'title' => t('View any Smartling Entity Data entity'),
    ),
    'edit any smartling_entity_data entity' => array(
      'title' => t('Edit any Smartling Entity Data entity'),
    ),
    'create smartling_entity_data entities' => array(
      'title' => t('Create Smartling Entity Data Entities'),
    ),
  );
  return $permissions;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function smartling_form_entity_translation_admin_form_alter(&$form, &$form_state) {

  $form['enabled']['entity_translation_entity_types']['#disabled'] = TRUE;

  $form['smartling'] = array(
    '#type' => 'item',
    '#title' => t('Some settings should be disabled when using Smartling.'),
    '#weight' => -100,
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @see smartling_field_settings_update_submit()
 */
function smartling_form_entity_translation_translatable_form_alter(&$form, &$form_state) {
  $form['#submit'][] = 'smartling_field_settings_update_submit';
}

/**
 * smartling_field_settings_update_submit().
 *
 * If a translation for the field was turned off, remove the field from the configuration node smartling
 */
function smartling_field_settings_update_submit($form, &$form_state) {

  if (($form_state['values']['translatable'] == 1) && ($form_state['values']['confirm'] == 1) && !empty($form_state['field']['bundles'])) {
    $smartling_settings = smartling_settings_get_handler();
    foreach ($form_state['field']['bundles'] as $entity_type => $bundles) {
      foreach ($bundles as $bundle) {
        $smartling_settings->deleteSingleFieldFromSettings($entity_type, $bundle, $form_state['field']['field_name']);
      }
    }
  }
}

/**
 * smartling_download_translate_form_submit
 */
function smartling_download_translate_form_submit($form, &$form_state) {
  if (count(array_filter($form_state['values']['target'])) !== 0) {
    global $user;
    $langs = array();

    foreach ($form_state['values']['target'] as $d_locale) {
      if ($d_locale !== 0) {
        $langs[] = $d_locale;
      }
    }

    switch ($form['#entity_type']) {
      case 'node':
        $node = node_form_submit_build_node($form, $form_state);
        node_save($node);

        $nid = $form_state['values']['nid'];
        smartling_watchdog('Smartling start force download translated file for node id - @nid, locale - @locales', TRUE, array('@nid' => $nid, '@locales' => implode('; ', $langs)), WATCHDOG_INFO, l(t('Edit node'), 'node/' . $nid . '/edit'));

        if (smartling_nodes_method($form['#node']->type)) {
          // For nodes method
          $translations = translation_node_get_translations($form['#node']->tnid);
          // Get original
          if (!empty($translations)) {
            foreach ($translations as $langcode => $value) {
              if ($translations[$langcode]->nid == $form['#node']->tnid) {
                $d_locale_origin = $langcode;
                $original_nid = $translations[$langcode]->nid;
                break;
              }
            }
          }
          else {
            $original_nid = 'error';
            $d_locale_origin = 'error';
          }

          foreach ($form_state['values']['target'] as $d_locale) {
            if ($d_locale !== 0) {
              $entity_data = smartling_entity_load_by_conditions(array('rid' => $original_nid, 'bundle' => $form['#bundle'], 'target_language' => $d_locale));

              if ($entity_data != FALSE) {
                smartling_download_translate($original_nid, $d_locale, $entity_data);

                $entity_data->target_language = $d_locale;
                $entity_data->submitter = $user->uid;
                $entity_data->submission_date = time();

                smartling_entity_data_save($entity_data);
                smartling_set_translation_status($entity_data, SMARTLING_STATUS_EVENT_DOWNLOAD_FROM_SERVICE);
                smartling_watchdog('Smartling finish force download translated file for node id - @nid, language - @language', TRUE, array('@nid' => $original_nid, '@language' => $d_locale), WATCHDOG_INFO, l(t('Edit node'), 'node/' . $original_nid . '/edit'));
              }
              elseif ($entity_data == FALSE || empty($entity_data->translated_file_name)) {
                smartling_watchdog('Smartling FAIL force download translated file for node id - @nid, language - @language', TRUE, array('@nid' => $original_nid, '@language' => $d_locale), WATCHDOG_INFO, l(t('Edit node'), 'node/' . $original_nid . '/edit'));
                drupal_set_message(t('You did not send this entity to translate or that the task is in queue. Language - @language', array('@language' => $d_locale)));
              }
            }
          }
        }
        else {
          // For fields method
          foreach ($form_state['values']['target'] as $d_locale) {

            if ($d_locale !== 0 && ($d_locale !== $form['#node']->language)) {
              $entity_data = smartling_entity_load_by_conditions(array('rid' => $nid, 'bundle' => $form['#bundle'], 'target_language' => $d_locale));

              if ($entity_data != FALSE) {
                smartling_download_translate($nid, $d_locale, $entity_data);

                $entity_data->target_language = $d_locale;
                $entity_data->submitter = $user->uid;
                $entity_data->submission_date = time();

                smartling_entity_data_save($entity_data);
                smartling_set_translation_status($entity_data, SMARTLING_STATUS_EVENT_DOWNLOAD_FROM_SERVICE);
                smartling_watchdog('Smartling finish force download translated file for node id - @nid, language - @language', TRUE, array('@nid' => $nid, '@language' => $s_locale), WATCHDOG_INFO, l(t('Edit node'), 'node/' . $nid . '/edit'));
              }
              elseif ($entity_data == FALSE || empty($entity_data->translated_file_name)) {
                smartling_watchdog('Smartling FAIL force download translated file for node id - @nid, language - @language', TRUE, array('@nid' => $nid, '@language' => $d_locale), WATCHDOG_INFO, l(t('Edit node'), 'node/' . $nid . '/edit'));
                drupal_set_message(t('You did not send this entity to translate or that the task is in queue. Language - @language', array('@language' => $d_locale)));
              }
            }
          }
        }
        break;

      case 'taxonomy_term':
        $term = taxonomy_form_term_submit_build_taxonomy_term($form, $form_state);

        $status = taxonomy_term_save($term);
        switch ($status) {
          case SAVED_UPDATED:
            smartling_watchdog('Updated term %term.', TRUE, array('%term' => $term->name), WATCHDOG_INFO, l(t('Edit term'), 'taxonomy/term/' . $term->tid . '/edit'));
            // Clear the page and block caches to avoid stale data.
            cache_clear_all();
            break;
        }

        smartling_watchdog('Smartling start force download translated file for taxonomy term id - @tid, locale - @locales', TRUE, array('@tid' => $term->tid, '@locales' => implode('; ', $langs)), WATCHDOG_INFO, l(t('Edit term'), 'taxonomy/term/' . $term->tid . '/edit'));

        $language_default = language_default()->language;
        if ($term->language == $language_default) {
          $tid = $term->tid;
        }
        else {
          $original_term = smartling_get_original_entity($term->tid, $form['#entity_type']);
          $tid = ($original_term) ? $original_term->tid : $original_term;
        }

        foreach ($form_state['values']['target'] as $d_locale) {
          if ($d_locale !== 0) {
            $entity_data = smartling_entity_load_by_conditions(array('rid' => $tid, 'entity_type' => $form['#entity_type'], 'target_language' => $d_locale));

            if ($entity_data != FALSE) {
              smartling_download_translate($tid, $d_locale, $entity_data);

              $entity_data->target_language = $d_locale;
              $entity_data->submitter = $user->uid;
              $entity_data->submission_date = time();

              smartling_entity_data_save($entity_data);
              smartling_set_translation_status($entity_data, SMARTLING_STATUS_EVENT_DOWNLOAD_FROM_SERVICE);
              smartling_watchdog('Smartling finish force download translated file for term id - @rid, language - @language', TRUE, array('@rid' => $tid, '@language' => $d_locale), WATCHDOG_INFO, l(t('Edit term'), 'taxonomy/term/' . $tid . '/edit'));
            }
            elseif ($entity_data == FALSE || empty($entity_data->translated_file_name)) {
              smartling_watchdog('Smartling FAIL force download translated file for term id - @rid, language - @language', TRUE, array('@rid' => $tid, '@language' => $d_locale), WATCHDOG_INFO, l(t('Edit term'), 'taxonomy/term/' . $tid . '/edit'));
              drupal_set_message(t('You did not send this entity to translate or that the task is in queue. Language - @language', array('@language' => $d_locale)));
            }
          }
        }

        break;

      case 'comment':

        $comment = comment_form_submit_build_comment($form, $form_state);
        $link = smartling_get_link_to_entity($comment->cid, $form['#entity_type']);
        comment_save($comment);
        smartling_watchdog('Updated comment %comment.', TRUE, array('%comment' => $comment->subject), WATCHDOG_INFO, $link);
        smartling_watchdog('Smartling start force download translated file for comment id - @cid, locale - @locales', TRUE, array('@cid' => $comment->cid, '@locales' => implode('; ', $langs)), WATCHDOG_INFO, $link);

        foreach ($form_state['values']['target'] as $d_locale) {
          if ($d_locale !== 0) {
            $entity_data = smartling_entity_load_by_conditions(array('rid' => $comment->cid, 'entity_type' => $form['#entity_type'], 'target_language' => $d_locale));

            if ($entity_data != FALSE) {
              smartling_download_translate($comment->cid, $d_locale, $entity_data);

              $entity_data->target_language = $d_locale;
              $entity_data->submitter = $user->uid;
              $entity_data->submission_date = time();

              smartling_entity_data_save($entity_data);
              smartling_set_translation_status($entity_data, SMARTLING_STATUS_EVENT_DOWNLOAD_FROM_SERVICE);
              smartling_watchdog('Smartling finish force download translated file for comment id - @rid, language - @language', TRUE, array('@rid' => $comment->cid, '@language' => $d_locale), WATCHDOG_INFO, $link);
            }
            elseif ($entity_data == FALSE || empty($entity_data->translated_file_name)) {
              smartling_watchdog('Smartling FAIL force download translated file for comment id - @rid, language - @language', TRUE, array('@rid' => $comment->cid, '@language' => $d_locale), WATCHDOG_INFO, $link);
              drupal_set_message(t('You did not send this entity to translate or that the task is in queue. Language - @language', array('@language' => $d_locale)));
            }
          }
        }

        break;

      case 'user':

        $account = $form['#user'];
        $link = smartling_get_link_to_entity($account->uid, $form['#entity_type']);
        user_save($account);
        smartling_watchdog('Updated user %user.', TRUE, array('%user' => $account->name), WATCHDOG_INFO, $link);
        smartling_watchdog('Smartling start force download translated file for user id - @uid, locale - @locales', TRUE, array('@uid' => $account->uid, '@locales' => implode('; ', $langs)), WATCHDOG_INFO, $link);

        foreach ($form_state['values']['target'] as $d_locale) {
          if ($d_locale !== 0) {
            $entity_data = smartling_entity_load_by_conditions(array('rid' => $account->uid, 'entity_type' => $form['#entity_type'], 'target_language' => $d_locale));

            if ($entity_data != FALSE) {
              smartling_download_translate($account->uid, $d_locale, $entity_data);

              $entity_data->target_language = $d_locale;
              $entity_data->submitter = $user->uid;
              $entity_data->submission_date = time();

              smartling_entity_data_save($entity_data);
              smartling_set_translation_status($entity_data, SMARTLING_STATUS_EVENT_DOWNLOAD_FROM_SERVICE);
              smartling_watchdog('Smartling finish force download translated file for user id - @rid, language - @language', TRUE, array('@rid' => $account->uid, '@language' => $d_locale), WATCHDOG_INFO, $link);
            }
            elseif ($entity_data == FALSE || empty($entity_data->translated_file_name)) {
              smartling_watchdog('Smartling FAIL force download translated file for user id - @rid, language - @language', TRUE, array('@rid' => $account->uid, '@language' => $d_locale), WATCHDOG_INFO, $link);
              drupal_set_message(t('You did not send this entity to translate or that the task is in queue. Language - @language', array('@language' => $d_locale)));
            }
          }
        }

        break;

      default:

        break;
    }
  }
  if (isset($_GET['destination'])) {
    unset($_GET['destination']);
    drupal_goto(current_path());
  }
}

/**
 * Implementation of hook_views_api().
 */
function smartling_views_api() {
  return array(
    'api' => 3,
  );
}

/**
 * Implements hook_cron().
 */
function smartling_cron() {
  $check_queue = db_select('smartling_entity_data', 'sed')
      ->fields('sed', array('eid', 'rid', 'entity_type', 'bundle', 'file_name', 'target_language', 'status'))
      ->condition('sed.progress', 100, '<>')
      ->condition('sed.target_language', 'original', '<>')
      ->execute()
      ->fetchAll();

  if (!empty($check_queue)) {
    $smartling_queue = DrupalQueue::get('smartling_check_status');
    $smartling_queue->createQueue();
    foreach ($check_queue as $gueue_item) {
      if (!empty($gueue_item->file_name)) {
        $obj = new stdClass;
        $obj->eid = $gueue_item->eid;
        $obj->rid = $gueue_item->rid;
        $obj->entity_type = $gueue_item->entity_type;
        $obj->bundle = $gueue_item->bundle;
        $obj->d_locale = $gueue_item->target_language;

        $smartling_queue->createItem($obj);
        smartling_watchdog('Add item to "smartling_check_status" queue. Smartling entity data id - @eid, related entity id - @rid, entity type - @entity_type', TRUE, array('@eid' => $gueue_item->eid, '@rid' => $gueue_item->rid, '@entity_type' => $gueue_item->entity_type), WATCHDOG_INFO);
        unset($obj);
      }
      else {
        if ($gueue_item->status != 0) {
          smartling_watchdog('Original file name is empty. Smartling entity data id - @eid, related entity id - @rid, entity type - @entity_type', TRUE, array('@eid' => $gueue_item->eid, '@rid' => $gueue_item->rid, '@entity_type' => $gueue_item->entity_type), WATCHDOG_WARNING);
        }
      }
    }
  }
}

/**
 * Implements hook_cron_alter().
 */
function smartling_cron_alter(&$hooks) {
  if (isset($hooks['smartling_cron']['description'])) {
    $hooks['smartling_cron']['description'] = t('Add nodes for translation');
  }
}

/**
 * Implements hook_cron_queue_info().
 */
function smartling_cron_queue_info() {
  $queues['smartling_upload'] = array(
    'worker callback' => 'smartling_queue_send_to_translate_process',
  );
  $queues['smartling_check_status'] = array(
    'worker callback' => 'smartling_queue_check_status_process',
  );
  $queues['smartling_download'] = array(
    'worker callback' => 'smartling_queue_download_update_translated_item_process',
  );

  return $queues;
}

/**
 * Implements hook_entity_load().
 */
function smartling_entity_load($entities, $type) {
  if ($type == 'node') {

    foreach ($entities as $entity) {

      if (smartling_supported_type($type, $entity->type)) {
        foreach (smartling_settings_get_handler()->nodeGetFieldsSettingsByBundle($entity->type) as $field_name) {

          if (smartling_field_is_translatable_by_field_name($field_name) && isset($entity->{$field_name}) && !empty($entity->{$field_name}) && isset($entity->{$field_name}[LANGUAGE_NONE]) && !isset($entity->{$field_name}[$entity->language])) {
            // If field have und value and dont have need value
            $entity->{$field_name}[$entity->language] = $entity->{$field_name}[LANGUAGE_NONE];
            field_attach_presave('node', $entity);
            field_attach_update('node', $entity);
            smartling_watchdog('Smartling adds value for field @fieldname, langcode @lang', TRUE, array('@fieldname' => $field_name, '@lang' => $entity->language), WATCHDOG_INFO, l(t('Edit node'), 'node/' . $entity->nid . '/edit'));
          }
        }
      }
    }
  }
}

/**
 * Implements hook_entity_update().
 */
function smartling_entity_update($entity, $type) {


  switch ($type) {
    case 'node':
      if (smartling_supported_type($type, $entity->type)) {
        $smartling_entity_data = smartling_entity_load_all_by_conditions(array('rid' => $entity->nid, 'bundle' => $entity->type));
      }
      else {
        $smartling_entity_data = FALSE;
      }
      break;

    case 'taxonomy_term':
      if (smartling_supported_type($type, $entity->vocabulary_machine_name)) {
        $smartling_entity_data = smartling_entity_load_all_by_conditions(array('rid' => $entity->tid, 'bundle' => $entity->vocabulary_machine_name));
      }
      else {
        $smartling_entity_data = FALSE;
      }
      break;

    case 'comment':
      if (smartling_supported_type($type, $entity->node_type)) {
        $smartling_entity_data = smartling_entity_load_all_by_conditions(array('rid' => $entity->cid, 'bundle' => $entity->node_type));
      }
      else {
        $smartling_entity_data = FALSE;
      }
      break;

    case 'user':
      if (smartling_supported_type($type, 'user')) {
        $smartling_entity_data = smartling_entity_load_all_by_conditions(array('rid' => $entity->uid, 'bundle' => 'user'));
      }
      else {
        $smartling_entity_data = FALSE;
      }
      break;

    default:
      $smartling_entity_data = FALSE;
      break;

      if ($smartling_entity_data !== FALSE && is_array($smartling_entity_data)) {
        $content_array = smartling_node_content_to_translate($entity);
        $content_hash = md5(serialize($content_array));
        foreach ($smartling_entity_data as $smartling_entity) {
          $old_content_hash = $smartling_entity->content_hash;

          if (!empty($old_content_hash) && ($content_hash !== $old_content_hash) && !isset($entity->send_to_smartling)) {
            smartling_set_translation_status($smartling_entity, SMARTLING_STATUS_EVENT_NODE_ENTITY_UPDATE);
          }
          $smartling_entity_changed = smartling_entity_data_load($smartling_entity->eid);
          $smartling_entity_changed->content_hash = $content_hash;
          smartling_entity_data_save($smartling_entity_changed);
        }
      }
  }
}

/**
 * Implements hook_entity_delete().
 */
function smartling_entity_delete($entity, $type) {
  $rid = 0;
  if (isset($entity->nid)) {
    $rid = $entity->nid;
  }
  elseif (isset($entity->tid)) {
    $rid = $entity->tid;
  }
  elseif (isset($entity->cid)) {
    $rid = $entity->cid;
  }
  elseif (isset($entity->uid)) {
    $rid = $entity->uid;
  }

  db_delete('smartling_entity_data')
      ->condition('rid', $rid)
      ->condition('entity_type', $type)
      ->execute();
}

/**
 * Implements hook_views_pre_render().
 */
function smartling_views_pre_render(&$view) {
  if ($view->name == 'smartlig_report') {
    drupal_add_library('system', 'ui.progressbar');
    drupal_add_js(drupal_get_path('module', 'smartling') . '/js/smartling_admin.js');
  }
}

/**
 * Implements hook_action_info().
 */
function smartling_action_info() {
  return array(
    'smartling_do_translate_action' => array(
      'type' => 'system',
      'label' => t('Smartling entity translate.'),
      'configurable' => TRUE,
      'triggers' => array('any'),
    ),
  );
}

function smartling_do_translate_action($entity, $context) {
  $entity_type = $context['entity_type'];

  global $user;

  $smartling_queue = DrupalQueue::get('smartling_upload');
  $smartling_queue->createQueue();

  switch ($entity_type) {
    case 'node':

      $link = smartling_get_link_to_entity($entity->nid, $entity_type);
      if (smartling_supported_type($entity_type, $entity->type) && smartling_translate_fields_is_set($entity->type)) {
        foreach ($context['translate_to_langs'] as $d_locale) {
          $d_locale_original = entity_language($entity_type, $entity);

          if (smartling_nodes_method($entity->type)) {
            $status = smartling_nodes_method_node_status($entity);

            if ($status == SMARTLING_ORIGINAL_NODE || $status == SMARTLING_ORIGINAL_WITHOUT_TRANSLATION_NODE) {
              if ($entity->tnid == '0') {
                $entity->tnid = $entity->nid;
                node_save($entity);
              }

              if ($d_locale != entity_language($entity_type, $entity)) {

                $entity_data = smartling_entity_load_by_conditions(array('rid' => $entity->nid, 'entity_type' => $entity_type, 'target_language' => $d_locale));

                if ($entity_data == FALSE) {
                  $entity_data = smartling_entity_data_create();
                  $entity_data->rid = $entity->nid;
                  $entity_data->bundle = $entity->type;
                  $entity_data->entity_type = $entity_type;
                  $entity_data->original_language = $d_locale_original;
                  $entity_data->target_language = $d_locale;
                  $entity_data->progress = 0;
                }

                $entity_data->translated_file_name = FALSE;
                $entity_data->submitter = $user->uid;
                $entity_data->submission_date = time();
                smartling_entity_data_save($entity_data);

                $d_locales[] = $d_locale;
                smartling_set_translation_status($entity_data, SMARTLING_STATUS_EVENT_SEND_TO_UPLOAD_QUEUE);
              }
            }
          }
          elseif (smartling_fields_method($entity->type)) {

            if ($d_locale != entity_language($entity_type, $entity)) {

              $entity_data = smartling_entity_load_by_conditions(array('rid' => $entity->nid, 'entity_type' => $entity_type, 'target_language' => $d_locale));

              if ($entity_data == FALSE) {
                $entity_data = smartling_entity_data_create();
                $entity_data->rid = $entity->nid;
                $entity_data->bundle = $entity->type;
                $entity_data->entity_type = $entity_type;
                $entity_data->original_language = $d_locale_original;
                $entity_data->target_language = $d_locale;
                $entity_data->progress = 0;
              }

              $entity_data->translated_file_name = FALSE;
              $entity_data->submitter = $user->uid;
              $entity_data->submission_date = time();
              smartling_entity_data_save($entity_data);

              $d_locales[] = $d_locale;
              smartling_set_translation_status($entity_data, SMARTLING_STATUS_EVENT_SEND_TO_UPLOAD_QUEUE);
            }
          }
        }

        $obj = new stdClass;
        $obj->rid = $entity->nid;
        $obj->entity_type = $entity_type;
        $obj->bundle = $entity->type;
        $obj->title = $entity->title;
        $obj->original_language = $d_locale_original;
        $obj->d_locales = $d_locales;
        $obj->submitter = $user->uid;
        // Create queue item
        $smartling_queue->createItem($obj);
        unset($obj);
      }
      else {
        drupal_set_message(t('Not support type or Smartling configuration problem for content type - @type.', array('@type' => $entity->type)), 'warning');
        smartling_watchdog('Not support type or Smartling configuration problem for content type - @type.', FALSE, array('@type' => $entity->type), WATCHDOG_ERROR, $link);
      }

      break;

    case 'taxonomy_term':

      $link = smartling_get_link_to_entity($entity->tid, $entity_type);

      if (smartling_supported_type($entity_type, $entity->vocabulary_machine_name)) {
        $language_default = language_default()->language;

        if (entity_language($entity_type, $entity) == $language_default) {
          $tid = $entity->tid;
        }
        else {
          $original_term = smartling_get_original_entity($entity->tid, $entity_type);
          $tid = $original_term->tid;
        }

        $d_locale_original = $language_default;

        foreach ($context['translate_to_langs'] as $d_locale) {
          if ($language_default !== $d_locale) {

            $entity_data = smartling_entity_load_by_conditions(array('rid' => $tid, 'entity_type' => $entity_type, 'target_language' => $d_locale));

            if ($entity_data == FALSE) {
              $entity_data = smartling_entity_data_create();
              $entity_data->rid = $tid;
              $entity_data->entity_type = $entity_type;
              $entity_data->bundle = $entity->vocabulary_machine_name;
              $entity_data->original_language = $d_locale_original;
              $entity_data->target_language = $d_locale;
              $entity_data->progress = 0;
            }

            $entity_data->translated_file_name = FALSE;
            $entity_data->submitter = $user->uid;
            $entity_data->submission_date = time();
            smartling_entity_data_save($entity_data);

            smartling_set_translation_status($entity_data, SMARTLING_STATUS_EVENT_SEND_TO_UPLOAD_QUEUE);
            $d_locales[] = $d_locale;
          }
        }

        $obj = new stdClass;
        $obj->rid = $tid;
        $obj->entity_type = $entity_type;
        $obj->bundle = $entity->vocabulary_machine_name;
        $obj->title = $entity->name;
        $obj->original_language = $d_locale_original;
        $obj->d_locales = $d_locales;
        $obj->submitter = $user->uid;
        // Create queue item
        $smartling_queue->createItem($obj);
        unset($obj);
      }
      else {
        drupal_set_message(t('Not support vocabulary - @vocabulary.', array('@vocabulary' => $entity->vocabulary_machine_name)), 'warning');
        smartling_watchdog('Not support vocabulary - @vocabulary.', FALSE, array('@vocabulary' => $entity->vocabulary_machine_name), WATCHDOG_ERROR, $link);
      }

      break;

    case 'comment':

      $link = smartling_get_link_to_entity($entity->cid, $entity_type);

      if (smartling_supported_type($entity_type, $entity->node_type)) {
        $d_locale_original = $entity->translations->original;
        foreach ($context['translate_to_langs'] as $d_locale) {
          if ($d_locale_original !== $d_locale) {
            $entity_data = smartling_entity_load_by_conditions(array('rid' => $entity->cid, 'entity_type' => $entity_type, 'target_language' => $d_locale));

            if ($entity_data == FALSE) {
              $entity_data = smartling_entity_data_create();
              $entity_data->rid = $entity->cid;
              $entity_data->entity_type = $entity_type;
              $entity_data->bundle = $entity->node_type;
              $entity_data->original_language = $d_locale_original;
              $entity_data->target_language = $d_locale;
              $entity_data->progress = 0;
            }

            $entity_data->translated_file_name = FALSE;
            $entity_data->submitter = $user->uid;
            $entity_data->submission_date = time();
            smartling_entity_data_save($entity_data);

            smartling_set_translation_status($entity_data, SMARTLING_STATUS_EVENT_SEND_TO_UPLOAD_QUEUE);
            $d_locales[] = $d_locale;
          }
        }

        $obj = new stdClass;
        $obj->rid = $entity->cid;
        $obj->entity_type = $entity_type;
        $obj->bundle = $entity->node_type;
        $obj->title = $entity->subject;
        $obj->original_language = $d_locale_original;
        $obj->d_locales = $d_locales;
        $obj->submitter = $user->uid;
        // Create queue item
        $smartling_queue->createItem($obj);
        unset($obj);
      }
      else {
        drupal_set_message(t('Not support comment - @comment.', array('@comment' => $entity->node_type)), 'warning');
        smartling_watchdog('Not support comment - @comment.', FALSE, array('@comment' => $entity->node_type), WATCHDOG_ERROR, $link);
      }

      break;

    case 'user':

      $link = smartling_get_link_to_entity($entity->uid, $entity_type);
      $d_locale_original = $entity->translations->original;

      if (smartling_supported_type($entity_type, 'user')) {
        foreach ($context['translate_to_langs'] as $d_locale) {

          if ($d_locale_original !== $d_locale) {
            $entity_data = smartling_entity_load_by_conditions(array('rid' => $entity->uid, 'entity_type' => $entity_type, 'target_language' => $d_locale));

            if ($entity_data == FALSE) {
              $entity_data = smartling_entity_data_create();
              $entity_data->rid = $entity->uid;
              $entity_data->entity_type = $entity_type;
              $entity_data->bundle = 'user';
              $entity_data->original_language = $d_locale_original;
              $entity_data->target_language = $d_locale;
              $entity_data->progress = 0;
            }

            $entity_data->translated_file_name = FALSE;
            $entity_data->submitter = $user->uid;
            $entity_data->submission_date = time();
            smartling_entity_data_save($entity_data);

            smartling_set_translation_status($entity_data, SMARTLING_STATUS_EVENT_SEND_TO_UPLOAD_QUEUE);
            $d_locales[] = $d_locale;
          }
        }
        $obj = new stdClass;
        $obj->rid = $entity->uid;
        $obj->entity_type = $entity_type;
        $obj->bundle = 'user';
        $obj->title = $entity->name;
        $obj->original_language = $d_locale_original;
        $obj->d_locales = $d_locales;
        $obj->submitter = $user->uid;
        // Create queue item
        $smartling_queue->createItem($obj);
        unset($obj);
      }
      else {
        drupal_set_message(t('Users do not translatable fields.'), 'warning');
        smartling_watchdog('Users do not translatable fields.', FALSE, array(), WATCHDOG_ERROR, $link);
      }

      break;

    default:
      break;
  }
}

function smartling_do_translate_action_form($context, &$form_state) {
  $form['do_translate_action']['languages'] = array(
    '#type' => 'checkboxes',
    '#options' => smartling_language_options_list(),
    '#title' => t('Check language'),
  );
  return $form;
}

function smartling_do_translate_action_validate($form, &$form_state) {
  $select_languages = array();
  if (!empty($form_state['input']['languages'])) {
    foreach ($form_state['input']['languages'] as $d_locale) {

      if (!is_null($d_locale) && !empty($d_locale)) {
        $select_languages[] = $d_locale;
      }
    }
  }

  if (!empty($select_languages) && (count($select_languages) > 0)) {
    $form_state['translate_to_langs'] = $select_languages;
  }
  else {
    form_set_error('languages', 'Check language, please.');
  }
}

function smartling_do_translate_action_submit($form, $form_state) {
  $count_op = count($form_state['selection']);
  smartling_watchdog(format_plural($count_op, 'Smartling Bulk Submit - add 1 entity to queue', 'Smartling Bulk Submit - add @count entities to queue'), TRUE, array(), WATCHDOG_INFO);
  return array('translate_to_langs' => $form_state['translate_to_langs']);
}

function smartling_push_callback_access($key) {
  return (variable_get('cron_key', 'drupal') == $key && empty($_POST));
}

function smartling_push_callback() {
  smartling_watchdog('Smartling starts to process callback request', TRUE, array(), WATCHDOG_INFO);

  if (isset($_GET['locale']) && isset($_GET['fileUri'])) {
    $d_locale = check_plain(smartling_convert_locale_drupal_to_smartling($_GET['locale'], TRUE));
    $file_uri = smartling_clean_filename($_GET['fileUri']);

    smartling_watchdog('Smartling get parameters: locale - @locale, fileUri - @fileUri', TRUE, array('@locale' => $d_locale, '@fileUri' => $file_uri), WATCHDOG_INFO);

    $entity_data = smartling_entity_load_by_conditions(array('target_language' => $d_locale, 'file_name' => $file_uri));

    if ($entity_data != FALSE) {
      if (module_exists('rules')) {
        rules_invoke_event('smartling_callback_call_event', $d_locale, $file_uri);
      }

      smartling_download_translate($entity_data->rid, $d_locale, $entity_data);
      smartling_set_translation_status($entity_data, SMARTLING_STATUS_EVENT_DOWNLOAD_FROM_SERVICE);

      smartling_watchdog('The callback function smartling downloaded translation for bundle - @bundle, entity id - @rid, language - @language', TRUE, array('@bundle' => $entity_data->bundle, '@rid' => $entity_data->rid, '@language' => $d_locale), WATCHDOG_INFO, l(t('Edit node'), 'node/' . $entity_data->rid . '/edit'));
    }
    elseif ($entity_data == FALSE) {
      smartling_watchdog('For the parameters locale - @locale and fileUri - @fileUri entity smartling are missing', TRUE, array('@locale' => $s_locale, '@fileUri' => $file_uri), WATCHDOG_WARNING);
      //404
    }
  }
  else {
    $params = array('locale', 'fileUri');
    foreach ($params as $param) {
      if (!isset($_GET[$param])) {
        smartling_watchdog('Smartling GET parameter "@param_name" are missing', TRUE, array('@param_name' => $param), WATCHDOG_WARNING);
        //404
      }
    }
  }
}
