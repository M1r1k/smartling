<?php

/**
 * @file
 * The Smartling module file.
 */
define('SMARTLING_KEY', 'smartling');

define('SMARTLING_TRANSLATE_NODE', 'smartling_translate_node');
define('SMARTLING_ORIGINAL_NODE', 'smartling_original_node');
define('SMARTLING_ORIGINAL_WITHOUT_TRANSLATION_NODE', 'smartling_original_without_translation_node');

define('SMARTLING_STATUS_IN_QUEUE', 0);
define('SMARTLING_STATUS_IN_TRANSLATE', 1);
define('SMARTLING_STATUS_TRANSLATED', 2);
define('SMARTLING_STATUS_CHANGE', 3);
define('SMARTLING_STATUS_EVENT_SEND_TO_UPLOAD_QUEUE', 'smartling_send_node_to_upload_queue');
define('SMARTLING_STATUS_EVENT_UPLOAD_TO_SERVICE', 'smartling_upload_node_to_service');
define('SMARTLING_STATUS_EVENT_DOWNLOAD_FROM_SERVICE', 'smartling_download_node_from_service');
define('SMARTLING_STATUS_EVENT_UPDATE_FIELDS', 'smartling_update_node_fields');
define('SMARTLING_STATUS_EVENT_NODE_ENTITY_UPDATE', 'check_status_in_node_entity_update');

define('SMARTLING_PRODUCTION_MODE', 'PRODUCTION');
define('SMARTLING_CALLBACK_URL', variable_get('smartling_callback_url', FALSE));
define('SMARTLING_API_URL', variable_get('smartling_api_url', 'https://capi.smartling.com/v1'));
define('SMARTLING_LOG', variable_get('smartling_log', 1));

$smartling_dir = variable_get('file_public_path');
if (is_null($smartling_dir)) {
  $smartling_dir = conf_path() . '/files/smartling';
}
else {
  $smartling_dir = $smartling_dir . '/smartling';
}
define('SMARTLING_DIRECTORY', $smartling_dir);


include_once('smartling.utils.inc');
include_once('smartling.processing.inc');

// @TODO: check why files[] directive in .info do not work
include_once('includes/smartling.workers.inc');
include_once('includes/smartling.entity.inc');
include_once('includes/smartling.entityController.inc');
include_once('views/smartling.views.inc');
include_once('views/smartling_handler_field_target_language.inc');
include_once('views/smartling_handler_field_locale_info.inc');
include_once('api/lib/SmartlingAPI.php');
include_once('api/lib/HttpClient.php');
include_once('api/lib/FileUploadParameterBuilder.php');

/**
 * Implements hook_menu().
 */
function smartling_menu() {
  $items = array();

  $items['admin/config/regional/smartling'] = array(
    'title' => 'Smartling settings',
    'weight' => -99,
    'type' => MENU_NORMAL_ITEM,
    'file' => 'smartling.admin.inc',
    'page callback' => 'smartling_admin_configuration_view',
    'access arguments' => array('administer smartling'),
  );

  $items['smartling/download/%/%'] = array(
    'title' => 'Smartling settings',
    'type' => MENU_CALLBACK,
    'page callback' => 'smartling_download_translate',
    'page arguments' => array(2, 3),
    'access arguments' => array('administer smartling'),
  );

  if (SMARTLING_CALLBACK_URL) {
    $items[SMARTLING_CALLBACK_URL] = array(
      'title' => 'Smartling push',
      'type' => MENU_CALLBACK,
      'page callback' => 'smartling_push_callback',
      'access callback' => TRUE,
    );
  }

  return $items;
}

/**
 * Implements hook_admin_paths().
 */
function smartling_admin_paths() {
  $paths = array(
    'admin/config/regional/smartling' => TRUE,
  );

  return $paths;
}

/**
 * Implements hook_permission().
 */
function smartling_permission() {
  $permissions = array(
    'administer smartling' => array(
      'title' => 'Administer Smartling',
      'description' => t('Access the administrative settings for the module.')
    ),
    'administer smartling_entity_data entities' => array(
      'title' => t('Administer Smartling Entity Data entities'),
    ),
    'view any smartling_entity_data entity' => array(
      'title' => t('View any Smartling Entity Data entity'),
    ),
    'edit any smartling_entity_data entity' => array(
      'title' => t('Edit any Smartling Entity Data entity'),
    ),
    'create smartling_entity_data entities' => array(
      'title' => t('Create Smartling Entity Data Entities'),
    ),
  );
  return $permissions;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Enable Smartling translation on a node type
 */
function smartling_form_node_type_form_alter(&$form, &$form_state) {
  $label = t('Enable Smartling translation (by fields)');
  $label_2 = t('Enable Smartling translation (by nodes)');
  $details = t('It will be possible to use Smartling service for automatic content translation if "Enable Smartling translation (by nodes)" or "Enable Smartling translation (by fields)" is ticked.');

  $form['workflow']['language_content_type']['#options'][SMARTLING_KEY] = $label;
  $form['workflow']['language_content_type']['#options'][2] = $label_2;
  $form['workflow']['language_content_type']['#description'] .= ' ' . $details;
  $form['#submit'][] = 'smartling_multilanguage_support_node_type_submit';
  $form['#validate'][] = 'smartling_multilanguage_support_node_type_validate';
}

function smartling_multilanguage_support_node_type_validate(&$form, &$form_state) {
  if ($form_state['values']['language_content_type'] == SMARTLING_KEY || $form_state['values']['language_content_type'] == 2) {
    if (!smartling_is_configured()) {
      drupal_set_message(t('Please follow the page <a href="/admin/config/regional/smartling">"Smartling settings"</a> to setup Smartling configuration.'), 'warning');
      form_set_error('workflow');
    }
  }
}

function smartling_multilanguage_support_node_type_submit(&$form, &$form_state) {
  // Delete content type in smartling support types
  $smartling_translate_fields = variable_get('smartling_translate_fields', array());
  $type = $form_state['values']['type'];
  if ($form_state['values']['language_content_type'] != SMARTLING_KEY || $form_state['values']['language_content_type'] != 2) {
    if (isset($smartling_translate_fields[$type])) {
      unset($smartling_translate_fields[$type]);
      variable_set('smartling_translate_fields', $smartling_translate_fields);
    }
  }
}

function smartling_get_node_settings_form($form, &$form_state) {
  if (smartling_translate_fields_is_set($form['#node']->type)) {
    // Vertical Tab.
    $form['smartling'] = array(
      '#title' => t('Smartling management'),
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#group' => 'additional_settings',
      '#attributes' => array('id' => array('smartling_fieldset')),
      '#attached' => array(
        //'js' => array(
        //  drupal_get_path('module', 'smartling') . '/js/smartling_node_settings.js' => array(
        //    'type' => 'file',
        //  ),
        //),
        'css' => array(
          drupal_get_path('module', 'smartling') . '/css/smartling_node_settings.css' => array(
            'type' => 'file',
          ),
        ),
      ),
      '#modal' => TRUE,
    );

    $form['smartling']['content'] = array(
      '#type' => 'container',
    );

    // This is node for fields method translate or original for nodes method
    if (($form['#node']->tnid == '0') || ($form['#node']->tnid == $form['#node']->nid)) {
      $languages = smartling_language_list();
    }
    elseif ($form['#node']->tnid != $form['#node']->nid) {
      // This is node for nodes method translate | not original
      $languages = smartling_language_list();
      $node_original = node_load($form['#node']->tnid);
      unset($languages[$node_original->language]);
    }

    $options = array();

    if (!is_null($form['nid']['#value'])) {
      $check = array();

      if (($form['#node']->tnid != '0') && ($form['#node']->tnid != $form['#node']->nid)) {
        // For not original node in nodes translate method
        $translations = translation_node_get_translations($form['#node']->tnid);
        $original_nid = FALSE;
        // Get original
        foreach ($translations as $langcode => $value) {
          if ($translations[$langcode]->nid == $form['#node']->tnid) {
            $original_nid = $translations[$langcode]->nid;
            break;
          }
        }

        foreach ($languages as $langcode => $language) {
          if ($language->enabled != '0') {
            $s_locale = smartling_convert_locale_drupal_to_smartling($langcode);

            $entity_data = smartling_entity_load_by_conditions(array('rid' => $original_nid, 'target_language' => $s_locale));

            if ($entity_data !== FALSE) {
              switch ($entity_data->status) {
                case SMARTLING_STATUS_IN_QUEUE:
                  $options[$langcode] = '<span title="' . t('Node is waiting for translation') . '"><span class="lang-name">' . $language->name . '</span><span class="lang-status in-queue">' . $entity_data->progress . '%</span></span>';
                  break;
                case SMARTLING_STATUS_IN_TRANSLATE:
                  $options[$langcode] = '<span title="' . t('Translation is in progress') . '"><span class="lang-name">' . $language->name . '</span><span class="lang-status in-translate">' . $entity_data->progress . '%</span></span>';
                  break;
                case SMARTLING_STATUS_TRANSLATED:
                  $options[$langcode] = '<span title="' . t('Node is translated') . '"><span class="lang-name">' . $language->name . '</span><span class="lang-status translated">' . $entity_data->progress . '%</span></span>';
                  break;
                case SMARTLING_STATUS_CHANGE:
                  $options[$langcode] = '<span title="' . t('Node was changed after submitting for translation') . '"><span class="lang-name">' . $language->name . '</span><span class="lang-status status-changed">' . $entity_data->progress . '%</span></span>';
                  break;
              }
            }
            else {
              $options[$langcode] = $language->name;
            }

            $check[] = ($entity_data) ? $langcode : FALSE;
          }
        }
      }
      elseif (($form['#node']->tnid != '0') && ($form['#node']->tnid == $form['#node']->nid)) {
        // For original node in nodes translate method
        $translations = translation_node_get_translations($form['#node']->tnid);
        $original_nid = FALSE;
        // Get original
        foreach ($translations as $langcode => $value) {
          if ($translations[$langcode]->nid == $form['#node']->tnid) {
            $original_nid = $translations[$langcode]->nid;
            break;
          }
        }

        foreach ($languages as $langcode => $language) {

          if ($form['language']['#default_value'] != $langcode && $language->enabled != '0') {
            $s_locale = smartling_convert_locale_drupal_to_smartling($langcode);

            $entity_data = smartling_entity_load_by_conditions(array('rid' => $original_nid, 'target_language' => $s_locale));

            if ($entity_data !== FALSE) {
              switch ($entity_data->status) {
                case SMARTLING_STATUS_IN_QUEUE:
                  $options[$langcode] = '<span title="' . t('Node is waiting for translation') . '"><span class="lang-name">' . $language->name . '</span><span class="lang-status in-queue">' . $entity_data->progress . '%</span></span>';
                  break;
                case SMARTLING_STATUS_IN_TRANSLATE:
                  $options[$langcode] = '<span title="' . t('Translation is in progress') . '"><span class="lang-name">' . $language->name . '</span><span class="lang-status in-translate">' . $entity_data->progress . '%</span></span>';
                  break;
                case SMARTLING_STATUS_TRANSLATED:
                  $options[$langcode] = '<span title="' . t('Node is translated') . '"><span class="lang-name">' . $language->name . '</span><span class="lang-status translated">' . $entity_data->progress . '%</span></span>';
                  break;
                case SMARTLING_STATUS_CHANGE:
                  $options[$langcode] = '<span title="' . t('Node was changed after submitting for translation') . '"><span class="lang-name">' . $language->name . '</span><span class="lang-status status-changed">' . $entity_data->progress . '%</span></span>';
                  break;
              }
            }
            else {
              $options[$langcode] = $language->name;
            }

            $check[] = ($entity_data) ? $langcode : FALSE;
          }
        }
      }
      else {
        // For fieds method
        foreach ($languages as $langcode => $language) {
          if ($form['language']['#default_value'] != $langcode && $language->enabled != '0') {
            $s_locale = smartling_convert_locale_drupal_to_smartling($langcode);
            $entity_data = smartling_entity_load_by_conditions(array('rid' => $form['nid']['#value'], 'target_language' => $s_locale));
            if ($entity_data !== FALSE) {
              switch ($entity_data->status) {
                case SMARTLING_STATUS_IN_QUEUE:
                  $options[$langcode] = '<span title="' . t('Node is waiting for translation') . '"><span class="lang-name">' . $language->name . '</span><span class="lang-status in-queue">' . $entity_data->progress . '%</span></span>';
                  break;
                case SMARTLING_STATUS_IN_TRANSLATE:
                  $options[$langcode] = '<span title="' . t('Translation is in progress') . '"><span class="lang-name">' . $language->name . '</span><span class="lang-status in-translate">' . $entity_data->progress . '%</span></span>';
                  break;
                case SMARTLING_STATUS_TRANSLATED:
                  $options[$langcode] = '<span title="' . t('Node is translated') . '"><span class="lang-name">' . $language->name . '</span><span class="lang-status translated">' . $entity_data->progress . '%</span></span>';
                  break;
                case SMARTLING_STATUS_CHANGE:
                  $options[$langcode] = '<span title="' . t('Node was changed after submitting for translation') . '"><span class="lang-name">' . $language->name . '</span><span class="lang-status status-changed">' . $entity_data->progress . '%</span></span>';
                  break;
              }
            }
            else {
              $options[$langcode] = $language->name;
            }
            $check[] = ($entity_data) ? $langcode : FALSE;
          }
        }
      }

      $form['smartling']['content']['target'] = array(
        '#type' => 'checkboxes',
        '#title' => 'Target Locales',
        '#options' => $options,
        '#default_value' => $check,
      );
    }
    else {
      foreach ($languages as $langcode => $language) {
        $options[$langcode] = $language->name;
      }

      $form['smartling']['content']['target'] = array(
        '#type' => 'checkboxes',
        '#title' => 'Target Locales',
        '#options' => $options,
      );
    }

    $form['smartling']['submit_to_translate'] = array(
      '#type' => 'submit',
      '#value' => 'Send to Smartling',
      '#submit' => array('smartling_get_node_settings_form_submit'),
    );

    $form['smartling']['submit_to_download'] = array(
      '#type' => 'submit',
      '#value' => 'Download Translation',
      '#submit' => array('smartling_download_translate_form_submit'),
    );

    return $form;
  }
}

/**
 * smartling_download_translate_form_submit
 */
function smartling_download_translate_form_submit($form, &$form_state) {
  $node = node_form_submit_build_node($form, $form_state);
  node_save($node);

  $langs = array();
  foreach ($form_state['values']['target'] as $d_locale) {
    if ($d_locale !== 0) {
      $langs[] = smartling_convert_locale_drupal_to_smartling($d_locale);
    }
  }
  $nid = $form_state['values']['nid'];
  smartling_watchdog('Smartling start force download translated file for node id - @nid, locale - @locales', TRUE, array('@nid' => $nid, '@locales' => implode('; ', $langs)), WATCHDOG_INFO, l(t('Edit node'), 'node/' . $nid . '/edit'));

  global $user;

  if (smartling_nodes_method($form['#node']->type)) {
    // For nodes method
    $translations = translation_node_get_translations($form['#node']->tnid);
    // Get original
    if (!empty($translations)) {
      foreach ($translations as $langcode => $value) {
        if ($translations[$langcode]->nid == $form['#node']->tnid) {
          $s_locale_origin = smartling_convert_locale_drupal_to_smartling($langcode);
          $original_nid = $translations[$langcode]->nid;
          break;
        }
      }
    }
    else {
      $original_nid = 'error';
      $s_locale_origin = 'error';
    }

    foreach ($form_state['values']['target'] as $d_locale) {
      if ($d_locale !== 0) {
        $s_locale = smartling_convert_locale_drupal_to_smartling($d_locale);
        $entity_data = smartling_entity_load_by_conditions(array('rid' => $original_nid, 'target_language' => $s_locale));

        if ($entity_data != FALSE) {

          $progress = smartling_download_translate($original_nid, $s_locale, $entity_data);
          if ($progress != 'exception') {
            $entity_data->target_language = $s_locale;
            $entity_data->submitter = $user->uid;
            $entity_data->submission_date = time();
            $entity_data->progress = $progress;

            smartling_entity_data_save($entity_data);

            smartling_set_translation_status($entity_data, SMARTLING_STATUS_EVENT_DOWNLOAD_FROM_SERVICE);

            smartling_watchdog('Smartling finish force download translated file for node id - @nid, language - @language', TRUE, array('@nid' => $original_nid, '@language' => $s_locale), WATCHDOG_INFO, l(t('Edit node'), 'node/' . $original_nid . '/edit'));

            drupal_set_message(t('Uploaded for language translation @language', array('@language' => $s_locale)));
          }
        }
        elseif ($entity_data == FALSE || empty($entity_data->translated_file_name)) {
          smartling_watchdog('Smartling FAIL force download translated file for node id - @nid, language - @language', TRUE, array('@nid' => $original_nid, '@language' => $s_locale), WATCHDOG_INFO, l(t('Edit node'), 'node/' . $original_nid . '/edit'));
          drupal_set_message(t('You did not send this entity to translate or that the task is in queue. Language - @language', array('@language' => $s_locale)));
        }
      }
    }
  }
  else {
    // For fields method
    foreach ($form_state['values']['target'] as $d_locale) {

      if ($d_locale !== 0 && ($d_locale !== $form['#node']->language)) {
        $s_locale = smartling_convert_locale_drupal_to_smartling($d_locale);
        $entity_data = smartling_entity_load_by_conditions(array('rid' => $nid, 'target_language' => $s_locale));

        if ($entity_data != FALSE) {

          $progress = smartling_download_translate($nid, $s_locale, $entity_data);
          if ($progress != 'exception') {
            $entity_data->target_language = $s_locale;
            $entity_data->submitter = $user->uid;
            $entity_data->submission_date = time();
            $entity_data->progress = $progress;
            smartling_entity_data_save($entity_data);

            smartling_watchdog('Smartling finish force download translated file for node id - @nid, language - @language', TRUE, array('@nid' => $nid, '@language' => $s_locale), WATCHDOG_INFO, l(t('Edit node'), 'node/' . $nid . '/edit'));

            drupal_set_message(t('Uploaded for language translation @language', array('@language' => $s_locale)));
          }
        }
        elseif ($entity_data == FALSE || empty($entity_data->translated_file_name)) {
          smartling_watchdog('Smartling FAIL force download translated file for node id - @nid, language - @language', TRUE, array('@nid' => $nid, '@language' => $s_locale), WATCHDOG_INFO, l(t('Edit node'), 'node/' . $nid . '/edit'));
          drupal_set_message(t('You did not send this entity to translate or that the task is in queue. Language - @language', array('@language' => $s_locale)));
        }
      }
    }
  }
  if (isset($_GET['destination'])) {
    unset($_GET['destination']);
    drupal_goto(current_path());
  }
}

/**
 * smartling_get_node_settings_form_submit
 */
function smartling_get_node_settings_form_submit($form, &$form_state) {
  if (count(array_filter($form_state['values']['target'])) !== 0) {
    $node = node_form_submit_build_node($form, $form_state);
    node_save($node);

    $nid = $form['#node']->nid;
    global $user;

    $smartling_queue = DrupalQueue::get('smartling_upload');
    $smartling_queue->createQueue();
    $langs = array();

    if (smartling_nodes_method($form['#node']->type)) {
      $original_nid = $form['#node']->nid;
      $original_title = $form['#node']->title;
      // For nodes method
      $status = smartling_nodes_method_node_status($form['#node']);
      if ($status == SMARTLING_ORIGINAL_NODE || $status == SMARTLING_ORIGINAL_WITHOUT_TRANSLATION_NODE) {
        $form['#node']->tnid = $form['#node']->nid;
        node_save($form['#node']);
      }

      if ($status == SMARTLING_TRANSLATE_NODE) {
        $translations = translation_node_get_translations($form['#node']->tnid);
        // Get original language
        foreach ($translations as $langcode => $value) {
          if ($translations[$langcode]->nid == $form['#node']->tnid) {
            $s_locale_origin = smartling_convert_locale_drupal_to_smartling($langcode);
            $original_nid = $translations[$langcode]->nid;
            $original_title = $translations[$langcode]->title;
            break;
          }
          else {
            $s_locale_origin = 'error';
          }
        }
      }
      elseif ($status == SMARTLING_ORIGINAL_NODE || $status == SMARTLING_ORIGINAL_WITHOUT_TRANSLATION_NODE) {
        $s_locale_origin = smartling_convert_locale_drupal_to_smartling($form['#node']->language);
      }

      foreach ($form_state['values']['target'] as $d_locale) {
        if ($d_locale !== 0) {
          $s_locale = smartling_convert_locale_drupal_to_smartling($d_locale);

          if (smartling_supported_type($form_state['values']['type'])) {

            $entity_data = smartling_entity_load_by_conditions(array('rid' => $original_nid, 'target_language' => $s_locale));

            if ($entity_data == FALSE) {
              $entity_data = smartling_entity_data_create();
              $entity_data->rid = $original_nid;
              $entity_data->bundle = $form['#node']->type;
              $entity_data->original_language = $s_locale_origin;
              $entity_data->target_language = $s_locale;
              $entity_data->progress = 0;
            }

            $entity_data->translated_file_name = FALSE;
            $entity_data->submitter = $user->uid;
            $entity_data->submission_date = time();
            smartling_entity_data_save($entity_data);

            smartling_set_translation_status($entity_data, SMARTLING_STATUS_EVENT_SEND_TO_UPLOAD_QUEUE);
            $langs[] = $s_locale;
          }
        }
      }
      $obj = new stdClass;
      $obj->rid = $original_nid;
      $obj->type = $form['#node']->type;
      $obj->title = $original_title;
      $obj->original_language = $s_locale_origin;
      $obj->s_locales = $langs;
      $obj->submitter = $user->uid;
      // Create queue item
      $smartling_queue->createItem($obj);
      $title = $original_title;
      unset($obj);
      smartling_watchdog('Add smartling queue task for node id - @nid, locale - @locale', TRUE, array('@nid' => $original_nid, '@locale' => implode('; ', $langs)), WATCHDOG_INFO, l(t('Edit node'), 'node/' . $original_nid . '/edit'));
    }
    else {
      // For fields method

      foreach ($form_state['values']['target'] as $d_locale) {
        if ($d_locale !== 0 && ($d_locale !== $form['#node']->language)) {
          $s_locale = smartling_convert_locale_drupal_to_smartling($d_locale);
          if (smartling_supported_type($form_state['values']['type'])) {
            $s_locale_origin = smartling_convert_locale_drupal_to_smartling($form['#node']->language);

            $entity_data = smartling_entity_load_by_conditions(array('rid' => $nid, 'target_language' => $s_locale));

            if ($entity_data == FALSE) {
              $entity_data = smartling_entity_data_create();
              $entity_data->rid = $nid;
              $entity_data->bundle = $form_state['values']['type'];
              $entity_data->original_language = $s_locale_origin;
              $entity_data->target_language = $s_locale;
              $entity_data->progress = 0;
            }

            $entity_data->translated_file_name = FALSE;
            $entity_data->submitter = $user->uid;
            $entity_data->submission_date = time();
            smartling_entity_data_save($entity_data);

            smartling_set_translation_status($entity_data, SMARTLING_STATUS_EVENT_SEND_TO_UPLOAD_QUEUE);
            $langs[] = $s_locale;
          }
        }
      }
      $obj = new stdClass;
      $obj->rid = $nid;
      $obj->type = $form_state['values']['type'];
      $obj->title = $form_state['values']['title'];
      $obj->original_language = $s_locale_origin;
      $obj->s_locales = $langs;
      $obj->submitter = $user->uid;
      // Create queue item
      $smartling_queue->createItem($obj);
      $title = $form_state['values']['title'];
      unset($obj);
      smartling_watchdog('Add smartling queue task for node id - @nid, locale - @locale', TRUE, array('@nid' => $nid, '@locale' => implode('; ', $langs)), WATCHDOG_INFO, l(t('Edit node'), 'node/' . $nid . '/edit'));
    }

    if (isset($_GET['destination'])) {
      unset($_GET['destination']);
    }

    $langs = implode(', ', $langs);
    drupal_set_message(t('The node "@title" has been sent to Smartling for translation to "@langs".', array('@title' => $title, '@langs' => $langs)));
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * @param array $form
 *   A FAPI form array for the form being altered.
 * @param array $form_state
 *   A FAPI form state array for the form being altered.
 * @param string $form_id
 *   The ID of the form being altered.
 */
function smartling_form_node_form_alter(&$form, $form_state, $form_id) {
  if (!smartling_supported_type($form['#node']->type)) {
    return;
  }

  if (smartling_nodes_method($form['#node']->type) && !isset($form['#node']->tnid)) {
    return;
  }

  if (smartling_translate_fields_is_set($form['#node']->type)) {
    $form = array_merge($form, smartling_get_node_settings_form($form, $form_state));
  }
}

/**
 * Implements hook_node_presave().
 */
function smartling_node_presave($node) {
  // Make sure the title isn't overwritten with the translation when using the title module.
  if (module_exists('title') && array_key_exists('title_field', $node)) {
    if (isset($node->title_field[$node->language][0]['value'])) {
      $node->title = $node->title_field[$node->language][0]['value'];
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function smartling_node_delete($node) {
  $entity_data = smartling_entity_load_by_conditions(array('rid' => $node->nid));
  if ($entity_data !== FALSE) {
    db_delete('smartling_entity_data')
        ->condition('rid', $entity_data->rid)
        ->execute();
  }
}

/**
 * Implementation of hook_views_api().
 */
function smartling_views_api() {
  return array(
    'api' => 3,
  );
}

/**
 * Implements hook_cron().
 */
function smartling_cron() {
  $check_queue = db_select('smartling_entity_data', 'sed')
      ->fields('sed', array('eid', 'rid', 'target_language'))
      ->condition('sed.progress', 100, '<>')
      ->condition('sed.target_language', 'original', '<>')
      ->execute()
      ->fetchAll();

  if (!empty($check_queue)) {
    $smartling_queue = DrupalQueue::get('smartling_check_status');
    $smartling_queue->createQueue();
    foreach ($check_queue as $gueue_item) {
      $obj = new stdClass;
      $obj->eid = $gueue_item->eid;
      $obj->rid = $gueue_item->rid;
      $obj->s_locale = $gueue_item->target_language;

      $smartling_queue->createItem($obj);
      smartling_watchdog('Add item to "smartling_check_status" queue. Smartling entity data id - @eid, related entity id - @rid', TRUE, array('@eid' => $gueue_item->eid, '@rid' => $gueue_item->rid), WATCHDOG_INFO);
      unset($obj);
    }
  }
}

/**
 * Implements hook_cron_alter().
 */
function smartling_cron_alter(&$hooks) {
  if (isset($hooks['smartling_cron']['description'])) {
    $hooks['smartling_cron']['description'] = t('Add nodes for translation');
  }
}

/**
 * Implements hook_cron_queue_info().
 */
function smartling_cron_queue_info() {
  $queues['smartling_upload'] = array(
    'worker callback' => 'smartling_queue_send_to_translate_process',
  );
  $queues['smartling_check_status'] = array(
    'worker callback' => 'smartling_queue_check_status_process',
  );
  $queues['smartling_download'] = array(
    'worker callback' => 'smartling_queue_download_update_translated_item_process',
  );

  return $queues;
}

/**
 * Implements hook_entity_load().
 */
function smartling_entity_load($entities, $type) {
  if ($type == 'node') {

    foreach ($entities as $entity) {

      if (smartling_supported_type($entity->type)) {
        $fields = variable_get('smartling_translate_fields');
        if (isset($fields[$entity->type])) {
          foreach ($fields[$entity->type] as $field_name) {

            if (isset($entity->{$field_name}) && !empty($entity->{$field_name}) && isset($entity->{$field_name}[LANGUAGE_NONE]) && !isset($entity->{$field_name}[$entity->language])) {
              // If field have und value and dont have need value
              $entity->{$field_name}[$entity->language] = $entity->{$field_name}[LANGUAGE_NONE];
              field_attach_presave('node', $entity);
              field_attach_update('node', $entity);
              smartling_watchdog('Smartling adds value for field @fieldname, langcode @lang', TRUE, array('@fieldname' => $field_name, '@lang' => $entity->language), WATCHDOG_INFO, l(t('Edit node'), 'node/' . $entity->nid));
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_entity_update().
 */
function smartling_entity_update($entity, $type) {
  if (($type == 'node') && smartling_supported_type($entity->type)) {
    $smartling_entity_data = smartling_entity_load_all_by_conditions(array('rid' => $entity->nid));
    if ($smartling_entity_data !== FALSE && is_array($smartling_entity_data)) {
      foreach ($smartling_entity_data as $smartling_entity) {
        smartling_set_translation_status($smartling_entity, SMARTLING_STATUS_EVENT_NODE_ENTITY_UPDATE);
      }
    }
  }
}

/**
 * Implements hook_views_pre_render().
 */
function smartling_views_pre_render(&$view) {
  if ($view->name == 'smartlig_report') {
    drupal_add_library('system', 'ui.progressbar');
    drupal_add_js(drupal_get_path('module', 'smartling') . '/js/smartling_admin.js');
  }
}

/**
 * Implements hook_action_info().
 */
function smartling_action_info() {
  return array(
    'smartling_do_translate_action' => array(
      'type' => 'node',
      'label' => t('Smartling node translate.'),
      'configurable' => TRUE,
      'triggers' => array('node_update'),
    ),
  );
}

function smartling_do_translate_action($node, $context) {
  global $user;

  $smartling_queue = DrupalQueue::get('smartling_upload');
  $smartling_queue->createQueue();

  foreach ($context['translate_to_langs'] as $language) {
    $s_locale = smartling_convert_locale_drupal_to_smartling($language);
    $s_locale_origin = smartling_convert_locale_drupal_to_smartling($node->language);
    if (smartling_supported_type($node->type) && smartling_translate_fields_is_set($node->type)) {
      if (smartling_nodes_method($node->type)) {
        $status = smartling_nodes_method_node_status($node);
        if ($status == SMARTLING_ORIGINAL_NODE || $status == SMARTLING_ORIGINAL_WITHOUT_TRANSLATION_NODE) {
          if ($node->tnid == '0') {
            $node->tnid = $node->nid;
            node_save($node);
          }
          if ($language != $node->language) {

            $entity_data = smartling_entity_load_by_conditions(array('rid' => $node->nid, 'target_language' => $s_locale));

            if ($entity_data == FALSE) {
              $entity_data = smartling_entity_data_create();
              $entity_data->rid = $node->nid;
              $entity_data->bundle = $node->type;
              $entity_data->original_language = $s_locale_origin;
              $entity_data->target_language = $s_locale;
              $entity_data->progress = 0;
            }

            $entity_data->translated_file_name = FALSE;
            $entity_data->submitter = $user->uid;
            $entity_data->submission_date = time();
            smartling_entity_data_save($entity_data);

            $s_locales[] = $s_locale;
            smartling_set_translation_status($entity_data, SMARTLING_STATUS_EVENT_SEND_TO_UPLOAD_QUEUE);
          }
        }
      }
      elseif (smartling_fields_method($node->type)) {
        if ($language != $node->language) {

          $entity_data = smartling_entity_load_by_conditions(array('rid' => $node->nid, 'target_language' => $s_locale));

          if ($entity_data == FALSE) {
            $entity_data = smartling_entity_data_create();
            $entity_data->rid = $node->nid;
            $entity_data->bundle = $node->type;
            $entity_data->original_language = $s_locale_origin;
            $entity_data->target_language = $s_locale;
            $entity_data->progress = 0;
          }

          $entity_data->translated_file_name = FALSE;
          $entity_data->submitter = $user->uid;
          $entity_data->submission_date = time();
          smartling_entity_data_save($entity_data);

          $s_locales[] = $s_locale;
          smartling_set_translation_status($entity_data, SMARTLING_STATUS_EVENT_SEND_TO_UPLOAD_QUEUE);
        }
      }
    }
    else {
      drupal_set_message(t('Not support type or Smartling configuration problem for content type - @type.', array('@type' => $node->type)), 'warning');
      smartling_watchdog('Not support type or Smartling configuration problem for content type - @type.', FALSE, array('@type' => $node->type), WATCHDOG_ERROR, l(t('Edit node'), 'node/' . $node->nid));
    }
  }
  if (smartling_supported_type($node->type) && smartling_translate_fields_is_set($node->type)) {
    $obj = new stdClass;
    $obj->rid = $node->nid;
    $obj->type = $node->type;
    $obj->title = $node->title;
    $obj->original_language = $s_locale_origin;
    $obj->s_locales = $s_locales;
    $obj->submitter = $user->uid;
    // Create queue item
    $smartling_queue->createItem($obj);
    unset($obj);
  }
}

function smartling_do_translate_action_form($context, &$form_state) {
  $form['do_translate_action']['languages'] = array(
    '#type' => 'checkboxes',
    '#options' => smartling_language_options_list(),
    '#title' => t('Check language'),
  );
  return $form;
}

function smartling_do_translate_action_validate($form, &$form_state) {
  $select_languages = array();
  if (!empty($form_state['input']['languages'])) {
    foreach ($form_state['input']['languages'] as $d_locale) {

      if (!is_null($d_locale) && !empty($d_locale)) {
        $select_languages[] = $d_locale;
      }
    }
  }

  if (!empty($select_languages) && (count($select_languages) > 0)) {
    $form_state['translate_to_langs'] = $select_languages;
  }
  else {
    form_set_error('languages', 'Check language, please.');
  }
}

function smartling_do_translate_action_submit($form, $form_state) {
  $count_op = count($form_state['selection']);
  smartling_watchdog(format_plural($count_op, 'Smartling Bulk Submit - add 1 node', 'Smartling Bulk Submit - add @count nodes'), TRUE, array(), WATCHDOG_INFO);
  return array('translate_to_langs' => $form_state['translate_to_langs']);
}

function smartling_push_callback() {
  smartling_watchdog('function "smartling_push_callback" call', TRUE, array(), WATCHDOG_INFO);

  if (isset($_GET['locale']) && isset($_GET['fileUri'])) {
    $s_locale = check_plain($_GET['locale']);
    $file_uri = check_plain($_GET['fileUri']);

    smartling_watchdog('Smartling get parameters: locale - @locale, fileUri - @fileUri', TRUE, array('@locale' => $s_locale, '@fileUri' => $file_uri), WATCHDOG_INFO);

    $entity_data = smartling_entity_load_by_conditions(array('target_language' => $s_locale, 'file_name' => $file_uri));

    if ($entity_data != FALSE) {
      if (module_exists('rules')) {
        rules_invoke_event('smartling_callback_call_event', $s_locale, $file_uri);
      }

      $progress = smartling_download_translate($entity_data->rid, $s_locale);

      $entity_data->progress = $progress;

      smartling_entity_data_save($entity_data);

      smartling_set_translation_status($entity_data, SMARTLING_STATUS_EVENT_DOWNLOAD_FROM_SERVICE);

      smartling_watchdog('The callback function smartling downloaded translation for node id - @nid, language - @language', TRUE, array('@nid' => $entity_data->rid, '@language' => $s_locale), WATCHDOG_INFO, l(t('Edit node'), 'node/' . $entity_data->rid . '/edit'));
    }
    elseif ($entity_data == FALSE) {
      smartling_watchdog('For the parameters locale - @locale and fileUri - @fileUri entity smartling are missing', TRUE, array('@locale' => $s_locale, '@fileUri' => $file_uri), WATCHDOG_INFO);
    }
  }
  else {
    $params = array('locale', 'fileUri');
    foreach ($params as $param) {
      if (!isset($_GET[$param])) {
        smartling_watchdog('Smartling GET parameter "@param_name" are missing', TRUE, array('@param_name' => $param), WATCHDOG_WARNING);
      }
    }
  }
}

