<?php

/**
 * @file
 * The Smartling module file.
 */
define('SMARTLING_KEY', 'smartling');
$log_mode = variable_get('smartling_log', 1);
define('SMARTLING_LOG', $log_mode);
define('SMARTLING_DIRECTORY', variable_get('file_public_path', conf_path() . '/files/smartling'));

include_once('smartling.utils.inc');

// @TODO: check why files[] directive in .info do not work
include_once('includes/smartling.entity.inc');
include_once('includes/smartling.entityController.inc');
include_once('api/lib/SmartlingAPI.php');
include_once('api/lib/HttpClient.php');
//include_once('api/test/SmartlingAPITest.php');
//include_once('api/test/HttpClientTest.php');

/**
 * Implements hook_menu().
 */
function smartling_menu() {
  $items = array();

  $items['admin/config/regional/smartling'] = array(
    'title' => 'Smartling settings',
    'description' => 'Smartling settings',
    'file' => 'smartling.admin.inc',
    'page callback' => 'smartling_admin_configuration_view',
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('administer smartling')
  );

  // This provides a place for Field API to hang its own
  // interface and has to be the same as what was defined
  // in basic_entity_info() above.
  $items['admin/config/regional/smartling/entity-data'] = array(
    'title' => 'Administer smartling_entity_data entity type',
    'page callback' => 'smartling_entity_data_list_entities',
    'file' => 'includes/smartling.entity.inc',
    'access arguments' => array('administer smartling_entity_data entities'),
  );

  // Add example entities.
  $items['admin/config/regional/smartling/entity-data/add'] = array(
    'title' => 'Add an Smartling Entity Data Entity',
    'page callback' => 'smartling_entity_data_add',
    'file' => 'includes/smartling.entity.inc',
    'access arguments' => array('create smartling_entity_data entities'),
    'type' => MENU_LOCAL_ACTION,
  );

  return $items;
}

/**
 * Implements hook_views_data_alter().
 */
function smartling_views_data_alter(&$data) {
  /*
    $entity_info = entity_get_info();

    foreach ($entity_info as $entity_type => $info) {
    if ($entity_type !== 'smartling_entity_data') {
    // Note to entity.
    $data['smartling_entity_data']['smartling_entity_data_related_' . $entity_type] = array(
    'group' => t('Smartling'),
    'title' => t('Smartling Entity Data to @entity', array('@entity' => drupal_ucfirst($info['label']))),
    'help' => t('The @entity entity that is associated with the .', array('@entity' => $info['label'])),
    'relationship' => array(
    'handler' => 'views_handler_relationship',
    'label' => t('@entity from Smartling Entity Data', array('@entity' => $entity_type)),
    'base' => $info['base table'],
    'base field' => $info['entity keys']['id'],
    'relationship field' => 'eid',
    'extra' => array(
    array('table' => 'smartling_entity_data', 'field' => 'eid', 'value' => $entity_type),
    ),
    ),
    );
    }
    }
   *
   */

  $data['node']['smartling_entity_data'] = array(
    'group' => t('Smartling'),
    'title' => t('Smartling Entity'),
    'help' => t('Relate a user to the orders they have placed. This relationship will create one record for each order placed by the user.'),
    'relationship' => array(
      'base' => 'smartling_entity_data',
      'base field' => 'eid',
      'relationship field' => 'nid',
      'handler' => 'views_handler_relationship',
      'label' => t('Smartling entity ID'),
    )
  );
}

/**
 * Implements hook_menu_alter().
 *
 * Smartling use this hook for add update operations on admin/content page
 */
function smartling_menu_alter(&$items) {
  if (isset($items['admin/content']['page arguments'][0])) {
    $items['admin/content']['page arguments'][0] = 'smartling_node_admin_content';
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function smartling_module_implements_alter(&$implementations, $hook) {
  switch ($hook) {
    case 'menu_alter':

      break;
  }
}

/**
 * Implements hook_permission().
 */
function smartling_permission() {
  $permissions = array(
    'administer smartling' => array(
      'title' => 'Administer Smartling',
      'description' => t('Access the administrative settings for the module.')
    ),
    'administer smartling_entity_data entities' => array(
      'title' => t('Administer smartling_entity_data entities'),
    ),
    'view any smartling_entity_data entity' => array(
      'title' => t('View any Smartling Entity Data entity'),
    ),
    'edit any smartling_entity_data entity' => array(
      'title' => t('Edit any Smartling Entity Data entity'),
    ),
    'create smartling_entity_data entities' => array(
      'title' => t('Create Smartling Entity Data Entities'),
    ),
  );
  return $permissions;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Enable Smartling translation on a node type
 */
function smartling_form_node_type_form_alter(&$form, &$form_state) {
  $label = t('Enabled Smartling translation');
  $details = t('It will be possible to use Smartling service for automatic content translation if "Enabled Smartling translation" is ticked.');

  $form['workflow']['language_content_type']['#options'][SMARTLING_KEY] = $label;
  $form['workflow']['language_content_type']['#description'] .= ' ' . $details;
  $form['#submit'][] = 'smartling_multilingual_support_node_type_submit';
}

function smartling_multilingual_support_node_type_submit(&$form, &$form_state) {
  //delete content type in smartling support types
  $smartling_translate_fields = variable_get('smartling_translate_fields', array());
  $type = $form_state['values']['type'];
  if ($form_state['values']['language_content_type'] != SMARTLING_KEY) {
    if (isset($smartling_translate_fields[$type])) {
      unset($smartling_translate_fields[$type]);
      variable_set('smartling_translate_fields', $smartling_translate_fields);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Enable Smartling translation on a field type
 */
function smartling_form_field_ui_field_edit_form_alter(&$form, &$form_state) {
  if (!in_array($form['#field']['type'], array('text', 'text_long', 'text_textfield', 'text_textarea', 'text_with_summary', 'text_textarea_with_summary', 'field_collection_embed', 'link_field'))) {
    return $form;
  }
  if (smartling_supported_type($form['#instance']['bundle'])) {
    $default = 0;
    if (array_key_exists('smartling_translatable', $form['#field'])) {
      $default = $form['#field']['smartling_translatable'];
    }

    $form['field']['smartling_translatable'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable Smartling Translation'),
      '#description' => t('This allows fields to be translatable using the Smartling Platform.'),
      '#default_value' => $default,
    );

    $smartling_translate_fields = variable_get('smartling_translate_fields');

    if (isset($smartling_translate_fields[$form['#instance']['bundle']][$form['#instance']['field_name']])) {
      $form['field']['smartling_translatable']['#attributes']['checked'] = 'checked';
    }

    array_push($form['#submit'], 'smartling_update_field');
    return $form;
  }
}

/*
 * Saves data for smartling_form_field_ui_field_edit_form_alter()
 */

function smartling_update_field($form, $form_state) {
  $field_name = $form['#field']['field_name'];
  $field = field_info_field($field_name);
  $value = (int) $form['field']['smartling_translatable']['#value'];
  $type = $form_state['values']['instance']['bundle'];
  if ($value == 1) {
    $field['translatable'] = TRUE;
    field_update_field($field);
    $translate_filds = variable_get('smartling_translate_fields', array());
    $translate_filds[$type][$field_name] = $field_name;
    variable_set('smartling_translate_fields', $translate_filds);
    // This is needed for versions of Drupal core 7.10 and lower. See http://drupal.org/node/1380660 for details.
    drupal_static_reset('field_available_languages');
  }
  else {
    $translate_filds = variable_get('smartling_translate_fields', array());

    if (isset($translate_filds[$type][$field_name])) {
      unset($translate_filds[$type][$field_name]);

      if (count($translate_filds[$type]) == 0) {
        unset($translate_filds[$type]);
      }

      if ($translate_filds == array()) {
        variable_delete('smartling_translate_fields');
      }
      else {
        variable_set('smartling_translate_fields', $translate_filds);
      }
    }
  }
}

function smartling_get_node_settings_form($form, &$form_state, $nids = NULL) {
  $multiple = FALSE;
  $bulk_grid = FALSE;
  if (is_array($nids)) {
    if (count($nids) > 1) {
      $multiple = TRUE;
    }
    $bulk_grid = TRUE;
  }
  elseif (!is_null($nids)) {
    $nids = array($nids);
  }

  if (!$multiple) {
    if (!is_null($nids)) {
      // $node = lingotek_node_load_default(reset($nids));
    }
    else {
      $node = $form['#node'];
    }
  }
  if (smartling_supported_type($form['type']['#value'])) {

    smartling_translate_fields_is_set();

    $title = t('Smartling Translation');

    // Vertical Tab.
    $form['smartling'] = array(
      '#title' => t('Smartling management'),
      '#type' => 'fieldset',
      '#collapsible' => !$bulk_grid,
      '#collapsed' => !$bulk_grid,
      '#group' => 'additional_settings',
      '#attributes' => array('id' => array('smartling_fieldset')),
      '#attached' => array(
        'js' => array(
          drupal_get_path('module', 'smartling') . '/js/smartling_node_settings.js' => array(
            'type' => 'file',
          ),
        ),
      ),
      '#modal' => TRUE,
    );

    $form['smartling']['nids'] = array(
      '#type' => 'hidden',
      '#default_value' => json_encode($nids),
    );

    $form['smartling']['content'] = array(
      '#type' => 'container',
    );

    $form['smartling']['content']['note'] = array(
      '#type' => 'item',
      '#title' => $title,
      '#description' => t("The Smartlink Translation module was developed to help you tranlate your site."),
    );

    $languages = language_list('language');
    $options = array();

    if (!is_null($form['nid']['#value'])) {
      $check = array();
      $smartling_data = smartling_entity_data_load($form['nid']['#value']);
      if ($smartling_data !== FALSE) {
        $lang_info = unserialize($smartling_data->locale_name);
      }
      else {
        $lang_info = array();
      }

      foreach ($languages as $langcode => $language) {
        if ($form['language']['#default_value'] != $langcode && $language->enabled != '0') {
          $options[$langcode] = $language->name;
          $check[] = (isset($lang_info['translate_to'][$langcode])) ? $langcode : FALSE;
        }
      }

      $form['smartling']['content']['target'] = array(
        '#type' => 'checkboxes',
        '#title' => 'Target Locales',
        '#options' => $options,
        '#default_value' => $check,
      );
    }
    else {
      foreach ($languages as $langcode => $language) {
        $options[$langcode] = $language->name;
      }

      $form['smartling']['content']['target'] = array(
        '#type' => 'checkboxes',
        '#title' => 'Target Locales',
        '#options' => $options,
      );
    }

    $form['smartling']['submit_to_translate'] = array(
      '#type' => 'submit',
      '#value' => 'Submit to translate',
      '#submit' => array('smartling_get_node_settings_form_submit'),
    );
  }

  return $form;
}

/**
 * smartling_get_node_settings_form_submit
 */
function smartling_get_node_settings_form_submit($form, $form_state) {
  $nid = $form_state['values']['nid'];
  if (SMARTLING_LOG) {
    watchdog('smartling', 'Start smartling for node id - @nid', array('@nid' => $nid), WATCHDOG_INFO, l('Edit node', 'node/' . $nid . '/edit'));
  }

  $smartling_data = smartling_entity_data_load($nid);

  global $user;
  if ($smartling_data == FALSE) {
    $smartling_data = smartling_entity_data_create();
    $smartling_data->eid = $nid;
    $smartling_data->bundle = $form_state['values']['type'];
    $smartling_data->submission_date = time();
  }

  $smartling_data->submitter = $user->uid;
  $locales['original_language'] = $form_state['values']['language'];

  foreach ($form_state['values']['target'] as $d_locale) {
    if ($d_locale !== 0 && ($d_locale !== $form_state['values']['language'])) {
      $locales['translate_to'][$d_locale] = FALSE;
    }
  }

  $smartling_data->locale_name = serialize($locales);
  smartling_entity_data_save($smartling_data);

  $do_translate = smartling_build_xml_by_node_id($nid, $form_state['values']['title']);

  if ($do_translate !== FALSE) {
    $results = array();
    foreach ($locales['translate_to'] as $d_locale => $value) {
      $s_locale = smartling_convert_locale_drupal_to_smatrtling($d_locale);
      if ($s_locale !== FALSE) {
        $results[] = smartling_do_translate($nid, $s_locale);
      }
    }
  }
}

/**
 * Implements hook_node_operations().
 */
function smartling_node_operations() {
  return array(
    'smartling_translate' => array(
      'label' => t('Translate selected content (Smartling)'),
      'callback' => NULL,
    ),
  );
}

/**
 * Implements hook_action_info().
 */
function smartling_action_info() {
  return array(
    'smartling_do_translate_action' => array(
      'type' => 'node',
      'label' => t('Smartling node translate.'),
      'configurable' => TRUE,
      //'behavior' => array('changes_property'),
      'triggers' => array('node_update'),
    ),
  );
}

function smartling_do_translate_action($node, $context) {
  // Get the user configured for this special action.
  $account = user_load_by_name($context['author']);

  //watchdog('smartling', 'Smartling @type %title do translate.', array('@type' => node_type_get_name($node), '%title' => $node->title));
  //drupal_set_message(t('Node @type %title be translated.', array('@type' => node_type_get_name($node), '%title' => $node->title)));
}

function smartling_do_translate_action_form($context) {
  $form['do_translate_action'] = array(
    '#type' => 'item',
    '#title' => t('Account info'),
  );
  return $form;
}

function smartling_do_translate_action_validate($form, $form_state) {

}

function smartling_do_translate_action_submit($form, $form_state) {
  return array('translate_to' => array());
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * @param array $form
 *   A FAPI form array for the form being altered.
 * @param array $form_state
 *   A FAPI form state array for the form being altered.
 * @param string $form_id
 *   The ID of the form being altered.
 */
function smartling_form_node_form_alter(&$form, $form_state, $form_id) {
  // On node create, set the language select box to our source language, if this is a node content type that we translate for, if the form is in Add mode.
  if (!isset($form['nid']['#value'])) { // add mode (no node id set)
    if (smartling_supported_type($form['type']['#value'])) { // lingotek translated content type
      $form['language']['#default_value'] = smartling_get_source_language();
    }
  }

  if (!smartling_supported_type($form['#node']->type)) {
    return;
  }

  $node = smartling_empty_node();
  $document_id = FALSE;

  if (isset($form['nid']['#value'])) {
    $nid = $form['nid']['#value'];
    $node = smartling_node_load_default($nid);
    // TODO: our on document id, maybe UUID?
    // $document_id = lingotek_lingonode($nid, 'document_id');
  }

  global $language;

  $drupal_language_code = $language->language;

  /* if ($drupal_language_code != $node->language && lingotek_node_pushed($node)) {
    $lingotek_locale = Lingotek::convertDrupal2Lingotek($drupal_language_code);
    LingotekSync::setTargetStatus($node->nid, $lingotek_locale, LingotekSync::STATUS_PENDING); //set to pending so any changes will be downloaded on next sync
    $language_text = lingotek_language_field_lookup('native', $lingotek_locale) . " (" . $drupal_language_code . ")";
    $translation_edit_link = lingotek_get_workbench_url($node, $lingotek_locale, t('Edit Translation: @language_text', array('@language_text' => $language_text)));
    $edit_translation_message = t('Editing the fields below will only change the content of the source language, not the translation.');
    $edit_translation_message .= "<br/>" . $translation_edit_link;
    drupal_set_message($edit_translation_message, 'warning', FALSE);
    } */

  if (!isset($nid)) {
    $nid = NULL;
  }
  $form = array_merge($form, smartling_get_node_settings_form($form, $form_state, $nid));
}

/*
 * This is not a hook. This is a helper function to save all smartling related data.
 */

function smartling_node_save($node) {
  return $node;
}

/**
 * Implements hook_node_presave().
 */
function smartling_node_presave($node) {
  // Make sure the title isn't overwritten with the translation when using the title module.
  if (module_exists('title') && array_key_exists('title_field', $node)) {
    if (isset($node->title_field[$node->language][0]['value'])) {
      $node->title = $node->title_field[$node->language][0]['value'];
    }
  }
}

/**
 * Implements hook_node_view().
 */
function smartling_node_view($node, $view_mode) {

}

/**
 * Implements hook_node_insert().
 */
function smartling_node_insert($node) {
  if (smartling_supported_type($node->type)) {
    $smartling_data = smartling_entity_data_create();
    $smartling_data->eid = $node->nid;
    $smartling_data->bundle = $node->type;
    $smartling_data->submitter = $node->uid;
    $smartling_data->submission_date = $node->created;

    $locales['original_language'] = $node->language;
    foreach ($node->target as $locale) {
      if ($locale !== 0 && $locale !== $node->language) {
        $locales['translate_to'][$locale] = FALSE;
      }
    }

    $smartling_data->locale_name = serialize($locales);
    smartling_entity_data_save($smartling_data);
  }
}

/**
 * Implements hook_node_delete().
 */
function smartling_node_delete($node) {
  $entity_ids[] = $node->nid;
  smartling_entity_data_delete_multiple($entity_ids);
}

/**
 * Implements hook_node_load().
 */
function smartling_node_load($nodes, $types) {

}

/**
 * Implements hook_node_update().
 */
function smartling_node_update($node) {
  if (isset($node->target) && is_array($node->target)) {
    $smartling_data = smartling_entity_data_load($node->nid);
    global $user;
    $smartling_data->submitter = $user->uid;

    $locales['original_language'] = $node->language;
    foreach ($node->target as $locale) {
      if ($locale !== 0 && $locale !== $node->language) {
        $locales['translate_to'][$locale] = FALSE;
      }
    }

    $smartling_data->locale_name = serialize($locales);
    smartling_entity_data_save($smartling_data);
  }
}

/*
 * Implements hook_help().
 */

function smartling_help($path, $arg) {

}

/**
 * Implements hook_comment_insert().
 */
function smartling_comment_insert($comment) {

}

/**
 * Implements hook_comment_update().
 */
function smartling_comment_update($comment) {

}

/**
 * Implements hook_comment_delete().
 */
function smartling_comment_delete($comment) {

}

/**
 * Implements hook_comment_view().
 */
function smartling_comment_view($comment, $view_mode, $langcode) {

}

/**
 * Implements hook_entity_info_alter().
 */
function smartling_entity_info_alter(&$entity_info) {

}

/**
 * Implements hook_entity_presave().
 */
function smartling_entity_presave($entity, $type) {

}

/**
 * Implements hook_form_FORMID_alter().
 */
function smartling_form_comment_form_alter(&$form, $form_state) {

}

/**
 * Implements hook_field_language_alter().
 */
function smartling_field_language_alter(&$display_language, $context) {

}

/**
 * Implements hook_workbench_moderation_transition().
 *
 * Upload content automatically only if new state corresponds auto-upload workbench_moderation variables
 * Otherwise override upload
 */
function smartling_workbench_moderation_transition($node, $old_state, $new_state) {

}

/*
 * Implements hook_entity_delete().
 *
 * This removes the lingotek data of an entity.
 */

function smartling_entity_delete($entity, $type) {

}

/**
 * Implements hook_navbar().
 */
function smartling_navbar() {

  return;
}

/**
 * Implements hook_library().
 */
function smartling_library() {
  $libraries['smartling-navbar-switcher'] = array();
  return $libraries;
}

/**
 * Implementation of hook_form_alter().
 */
function smartling_form_alter(&$form, &$form_state, $form_id) {

}

/**
 * Implementation of hook_views_api().
 */
function smartling_views_api() {
  return array(
    'api' => 3,
  );
}

/**
 * Implements hook_cron().
 *
 * Updates the local cache of commonly used values.
 */
function smartling_cron() {
  smartling_do_cron_batch_operations();
}

/*
 * Implements hook_l10n_update().
 */

function smartling_l10n_update_projects_alter(&$projects) {

}
