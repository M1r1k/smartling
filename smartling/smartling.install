<?php

/**
 * @file
 * Install, update, and uninstall functions for the Smartling module.
 */

/**
 * Implements hook_install().
 */
function smartling_install() {
  variable_set('smartling_log', 1);
  variable_set('smartling_retrieval_type', 'published');
  variable_set('smartling_callback_url', 'smartling-callback');
  variable_set('smartling_api_url', 'https://capi.smartling.com/v1');

  $language_negotiation_language = array(
    'locale-url' => array(
      'callbacks' => array(
        'language' => 'locale_language_from_url',
        'switcher' => 'locale_language_switcher_url',
        'url_rewrite' => 'locale_language_url_rewrite_url',
      ),
      'file' => 'includes/locale.inc'),
    'language-default-url' => array(
      'callbacks' => array(
        'language' => 'language_from_default',
      ),
    ),
  );

  $language_negotiation_language_content = array(
    'locale-url' => array(
      'callbacks' => array(
        'language' => 'locale_language_from_url',
        'switcher' => 'locale_language_switcher_url',
        'url_rewrite' => 'locale_language_url_rewrite_url',
      ),
      'file' => 'includes/locale.inc'),
    'language-default-url' => array(
      'callbacks' => array(
        'language' => 'language_from_default',
      ),
    ),
  );

  $locale_language_providers_weight_language = array(
    'locale-url' => '-8',
    'locale-session' => '-6',
    'locale-user' => '-4',
    'locale-browser' => '-2',
    'language-default' => '10',
  );

  $locale_language_providers_weight_language_content = array(
    'locale-url' => '-8',
    'locale-session' => '-6',
    'locale-user' => '-4',
    'locale-browser' => '-2',
    'locale-interface' => '8',
    'language-default' => '10',
  );

  variable_set('language_negotiation_language', $language_negotiation_language);
  variable_set('language_negotiation_language_content', $language_negotiation_language_content);
  variable_set('locale_language_providers_weight_language', $locale_language_providers_weight_language);
  variable_set('locale_language_providers_weight_language_content', $locale_language_providers_weight_language_content);

  // Install default cron settings for smartling proccess
  $cron_base_settings = array();

  $cron_base_settings['smartling_cron'] = array(
    'enabled' => 1,
    'rules' => array(0 => '0 * * * *'),
    'catch_up' => '',
    'service_group' => '',
  );

  $cron_base_settings['ultimate_cron_queue_smartling_check_status'] = array(
    'enabled' => 1,
    'rules' => array(0 => '* * * * *'),
    'catch_up' => '',
    'queue_lease_time' => '',
    'service_group' => '',
    'queue_threads' => '5',
    'queue_threshold' => '1',
  );

  $cron_base_settings['ultimate_cron_queue_smartling_upload'] = array(
    'enabled' => 1,
    'rules' => array(0 => '* * * * *'),
    'catch_up' => '',
    'queue_lease_time' => '',
    'service_group' => '',
    'queue_threads' => '5',
    'queue_threshold' => '1',
  );

  $cron_base_settings['ultimate_cron_queue_smartling_download'] = array(
    'enabled' => 1,
    'rules' => array(0 => '* * * * *'),
    'catch_up' => '',
    'queue_lease_time' => '',
    'service_group' => '',
    'queue_threads' => '5',
    'queue_threshold' => '1',
  );

  foreach ($cron_base_settings as $name => $settings) {
    ultimate_cron_set_settings($name, $settings);
  }

  // i18 string settings
  $i18n_string_allowed_formats = array();
  // As the user has administer filters permissions we get a full list here
  foreach (filter_formats() as $fid => $format) {
    $i18n_string_allowed_formats[$fid] = $fid;
  }
  variable_set('i18n_string_allowed_formats', $i18n_string_allowed_formats);
}

/**
 * Implements hook_enable().
 */
function smartling_enable() {
  // Set Multilingual support for content types
  $node_types = node_type_get_types();
  if (is_array($node_types)) {
    foreach ($node_types as $type) {
      $mode = variable_get('language_content_type_' . $type->type, NULL);
      if (is_null($mode)) {
        variable_set('language_content_type_' . $type->type, '0'); // Must be string '0'
      }
      // Entity translate settings
      if (smartling_fields_method($type->type)) {
        $entity_translation_settings_node = array(
          'default_language' => ENTITY_TRANSLATION_LANGUAGE_DEFAULT,
          'hide_language_selector' => 1,
          'exclude_language_none' => 1,
          'lock_language' => 1,
          'shared_fields_original_only' => 0,
        );
        variable_set('entity_translation_settings_node__' . $type->type, $entity_translation_settings_node);
      }
    }
    // Entity translation types and other settings
    $entity_translation_entity_types = array(
      'node' => 'node',
      'taxonomy_term' => 0,
      'comment' => 0,
      'user' => 0,
    );
    variable_set('entity_translation_entity_types', $entity_translation_entity_types);
    variable_set('entity_translation_shared_labels', 1);
    variable_set('entity_translation_workflow_enabled', 0);
    variable_set('locale_field_language_fallback', 1);
  }
  // Ensure Smartling module is running after native translation modules
  db_update('system')->fields(array('weight' => 20))->condition('name', 'smartling')->execute();
}

/**
 * Implements hook_uninstall().
 */
function smartling_uninstall() {
  global $conf;
  foreach (array_keys($conf) as $key) {
    // It's important to use === instead of == with strpos()
    if (strpos($key, 'smartling_') === 0) {
      variable_del($key);
    }
  }

  $queue_array[] = 'smartling_check_status';
  $queue_array[] = 'smartling_upload';
  $queue_array[] = 'smartling_download';
  foreach ($queue_array as $queue_name) {
    $queue = DrupalQueue::get($queue_name);
    $queue->deleteQueue();
  }
}

/**
 * Implements hook_schema().
 */
function smartling_schema() {
  $schema['smartling_entity_data'] = array(
    'description' => 'Smartling entity information',
    'fields' => array(
      'eid' => array(
        'description' => 'Entity id',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'rid' => array(
        'description' => 'Related id',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'bundle' => array(
        'description' => '',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'original_language' => array(
        'description' => 'Original language code (drupal format)',
        'type' => 'varchar',
        'length' => 10,
        'not null' => TRUE,
        'default' => '',
      ),
      'target_language' => array(
        'description' => 'Target language code (drupal format)',
        'type' => 'varchar',
        'length' => 10,
        'not null' => TRUE,
        'default' => '',
      ),
      'file_name' => array(
        'description' => 'File with original content.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'translated_file_name' => array(
        'description' => 'File with translated content.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'progress' => array(
        'description' => '',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => NULL,
      ),
      'submitter' => array(
        'description' => '',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'submission_date' => array(
        'description' => 'The Unix timestamp when the entity was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'download' => array(
        'description' => '',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'status' => array(
        'description' => '',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => NULL,
      ),
      'content_hash' => array(
        'description' => '',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'primary key' => array('eid'),
    'indexes' => array(
      'rid' => array('rid'),
      'target_language' => array('target_language'),
    ),
  );

  return $schema;
}
